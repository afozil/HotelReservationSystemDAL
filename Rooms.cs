///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Rooms'
// Generated by LLBLGen v1.21.2003.712 Final on: Sunday, May 31, 2015, 11:11:22 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Rooms'.
	/// </summary>
	public class Rooms : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_lastModifiedDate, _createdDate, _out_Of_Order_ToDate, _out_Of_Order_FromDate;
            private SqlInt32        _isRefregerator_Available, _isCookingFaclity_Available, _number_Of_Kitchen, _number_Of_LivingRooms, _maximumOccupancy_Allowed, _is_Out_Of_Order, _out_Of_Order_MarkedBy, _number_Of_TV, _maximumGents_Allowed, _maximumKids_Allowed, _property_ID, _roomStatus_ID, _room_ID, _roomType_ID, _number_Of_Beds, _number_Of_Bathrooms, _createdUser, _lastModifiedUser, _number_Of_BedRooms;
			private SqlString		_roomNumber, _remarks, _description, _roomName_AR, _roomName_EN;
            private SqlString       _roomStatus_str, _roomType_str, _property_str;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Rooms()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RoomNumber</LI>
		///		 <LI>RoomName_EN</LI>
		///		 <LI>RoomName_AR. May be SqlString.Null</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Property_ID</LI>
		///		 <LI>RoomStatus_ID</LI>
		///		 <LI>CreatedUser</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>Number_Of_Beds</LI>
		///		 <LI>Number_Of_Bathrooms</LI>
		///		 <LI>Number_Of_Kitchen</LI>
		///		 <LI>Number_Of_LivingRooms</LI>
		///		 <LI>IsCookingFaclity_Available</LI>
		///		 <LI>IsRefregerator_Available</LI>
		///		 <LI>Number_Of_TV</LI>
		///		 <LI>MaximumGents_Allowed</LI>
		///		 <LI>MaximumKids_Allowed</LI>
		///		 <LI>MaximumOccupancy_Allowed</LI>
		///		 <LI>Is_Out_Of_Order</LI>
		///		 <LI>Out_Of_Order_MarkedBy</LI>
		///		 <LI>Out_Of_Order_FromDate. May be SqlDateTime.Null</LI>
		///		 <LI>Out_Of_Order_ToDate</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>Room_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rooms_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomNumber", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomName_EN", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomName_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomName_AR", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomName_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _description));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoomType_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomType_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iProperty_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _property_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoomStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomStatus_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_BedRooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_BedRooms));
                cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Beds", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Beds));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Bathrooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Bathrooms));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Kitchen", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Kitchen));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_LivingRooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_LivingRooms));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIsCookingFaclity_Available", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isCookingFaclity_Available));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIsRefregerator_Available", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isRefregerator_Available));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_TV", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_TV));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumGents_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumGents_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumKids_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumKids_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumOccupancy_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumOccupancy_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIs_Out_Of_Order", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _is_Out_Of_Order));
				cmdToExecute.Parameters.Add(new SqlParameter("@iOut_Of_Order_MarkedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _out_Of_Order_MarkedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_FromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_FromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_ToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_ToDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_room_ID = (SqlInt32)cmdToExecute.Parameters["@iRoom_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rooms_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rooms::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Room_ID</LI>
		///		 <LI>RoomNumber</LI>
		///		 <LI>RoomName_EN</LI>
		///		 <LI>RoomName_AR. May be SqlString.Null</LI>
		///		 <LI>Description. May be SqlString.Null</LI>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Property_ID</LI>
		///		 <LI>RoomStatus_ID</LI>
		///		 <LI>CreatedUser</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>Number_Of_Beds</LI>
		///		 <LI>Number_Of_Bathrooms</LI>
		///		 <LI>Number_Of_Kitchen</LI>
		///		 <LI>Number_Of_LivingRooms</LI>
		///		 <LI>IsCookingFaclity_Available</LI>
		///		 <LI>IsRefregerator_Available</LI>
		///		 <LI>Number_Of_TV</LI>
		///		 <LI>MaximumGents_Allowed</LI>
		///		 <LI>MaximumKids_Allowed</LI>
		///		 <LI>MaximumOccupancy_Allowed</LI>
		///		 <LI>Is_Out_Of_Order</LI>
		///		 <LI>Out_Of_Order_MarkedBy</LI>
		///		 <LI>Out_Of_Order_FromDate. May be SqlDateTime.Null</LI>
		///		 <LI>Out_Of_Order_ToDate</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rooms_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomNumber", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomName_EN", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomName_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRoomName_AR", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _roomName_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _description));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoomType_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomType_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iProperty_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _property_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoomStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomStatus_ID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				//cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_BedRooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_BedRooms));
                cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Beds", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Beds));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Bathrooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Bathrooms));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_Kitchen", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_Kitchen));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_LivingRooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_LivingRooms));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIsCookingFaclity_Available", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isCookingFaclity_Available));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIsRefregerator_Available", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isRefregerator_Available));
				cmdToExecute.Parameters.Add(new SqlParameter("@iNumber_Of_TV", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _number_Of_TV));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumGents_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumGents_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumKids_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumKids_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iMaximumOccupancy_Allowed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _maximumOccupancy_Allowed));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIs_Out_Of_Order", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _is_Out_Of_Order));
				cmdToExecute.Parameters.Add(new SqlParameter("@iOut_Of_Order_MarkedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _out_Of_Order_MarkedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_FromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_FromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_ToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_ToDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rooms_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rooms::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}



        public bool UpdateStatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Rooms_UpdateStatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRoomStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
                cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@iIs_Out_Of_Order", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _is_Out_Of_Order));
                cmdToExecute.Parameters.Add(new SqlParameter("@iOut_Of_Order_MarkedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _out_Of_Order_MarkedBy));
                cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_FromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_FromDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@daOut_Of_Order_ToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _out_Of_Order_ToDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorDesc));
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;


                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Rooms_UpdateStatus' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rooms::UpdateStatus::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }

		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Room_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rooms_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_Rooms_Delete' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rooms::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Room_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Room_ID</LI>
		///		 <LI>RoomNumber</LI>
		///		 <LI>RoomName_EN</LI>
		///		 <LI>RoomName_AR</LI>
		///		 <LI>Description</LI>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Property_ID</LI>
		///		 <LI>RoomStatus_ID</LI>
		///		 <LI>CreatedUser</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		///		 <LI>Number_Of_Beds</LI>
		///		 <LI>Number_Of_Bathrooms</LI>
		///		 <LI>Number_Of_Kitchen</LI>
		///		 <LI>Number_Of_LivingRooms</LI>
		///		 <LI>IsCookingFaclity_Available</LI>
		///		 <LI>IsRefregerator_Available</LI>
		///		 <LI>Number_Of_TV</LI>
		///		 <LI>MaximumGents_Allowed</LI>
		///		 <LI>MaximumKids_Allowed</LI>
		///		 <LI>MaximumOccupancy_Allowed</LI>
		///		 <LI>Is_Out_Of_Order</LI>
		///		 <LI>Out_Of_Order_MarkedBy</LI>
		///		 <LI>Out_Of_Order_FromDate</LI>
		///		 <LI>Out_Of_Order_ToDate</LI>
		///		 <LI>Remarks</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rooms_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Rooms");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rooms_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_room_ID = (Int32)toReturn.Rows[0]["Room_ID"];
					_roomNumber = (string)toReturn.Rows[0]["RoomNumber"];
					_roomName_EN = (string)toReturn.Rows[0]["RoomName_EN"];
					_roomName_AR = toReturn.Rows[0]["RoomName_AR"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["RoomName_AR"];
					_description = toReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Description"];
					_roomType_ID = (Int32)toReturn.Rows[0]["RoomType_ID"];
					_property_ID = (Int32)toReturn.Rows[0]["Property_ID"];
					_roomStatus_ID = (Int32)toReturn.Rows[0]["RoomStatus_ID"];
					_createdUser = (Int32)toReturn.Rows[0]["CreatedUser"];
					_createdDate = (DateTime)toReturn.Rows[0]["CreatedDate"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
					_number_Of_BedRooms = (Int32)toReturn.Rows[0]["Number_Of_BedRooms"];
                    _number_Of_Beds = (Int32)toReturn.Rows[0]["Number_Of_Beds"];
					_number_Of_Bathrooms = (Int32)toReturn.Rows[0]["Number_Of_Bathrooms"];
					_number_Of_Kitchen = (Int32)toReturn.Rows[0]["Number_Of_Kitchen"];
					_number_Of_LivingRooms = (Int32)toReturn.Rows[0]["Number_Of_LivingRooms"];
					_isCookingFaclity_Available = (Int32)toReturn.Rows[0]["IsCookingFaclity_Available"];
					_isRefregerator_Available = (Int32)toReturn.Rows[0]["IsRefregerator_Available"];
					_number_Of_TV = (Int32)toReturn.Rows[0]["Number_Of_TV"];
					_maximumGents_Allowed = (Int32)toReturn.Rows[0]["MaximumGents_Allowed"];
					_maximumKids_Allowed = (Int32)toReturn.Rows[0]["MaximumKids_Allowed"];
					_maximumOccupancy_Allowed = (Int32)toReturn.Rows[0]["MaximumOccupancy_Allowed"];
					_is_Out_Of_Order = (Int32)toReturn.Rows[0]["Is_Out_Of_Order"];
                    _out_Of_Order_MarkedBy = toReturn.Rows[0]["Out_Of_Order_MarkedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Out_Of_Order_MarkedBy"];
					_out_Of_Order_FromDate = toReturn.Rows[0]["Out_Of_Order_FromDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["Out_Of_Order_FromDate"];
                    _out_Of_Order_ToDate = toReturn.Rows[0]["Out_Of_Order_ToDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["Out_Of_Order_ToDate"];
					_remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
                    _roomType_str = (string)toReturn.Rows[0]["RoomType_EN"];
                    _property_str = (string)toReturn.Rows[0]["PropertyName_EN"];
                    _roomStatus_str = (string)toReturn.Rows[0]["RoomStatus_EN"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rooms::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rooms_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Rooms");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rooms_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rooms::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


        public DataTable SelectByType()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Rooms_SelectByType]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Rooms");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RoomType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomType_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Rooms_SelectByType' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rooms::SelectByType::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectByStatus()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Rooms_SelectByStatus]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Rooms");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RoomStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Rooms_SelectByStatus' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rooms::SelectByStatus::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt32 Room_ID
		{
			get
			{
				return _room_ID;
			}
			set
			{
				SqlInt32 room_IDTmp = (SqlInt32)value;
				if(room_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Room_ID", "Room_ID can't be NULL");
				}
				_room_ID = value;
			}
		}


		public SqlString RoomNumber
		{
			get
			{
				return _roomNumber;
			}
			set
			{
				SqlString roomNumberTmp = (SqlString)value;
				if(roomNumberTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomNumber", "RoomNumber can't be NULL");
				}
				_roomNumber = value;
			}
		}


		public SqlString RoomName_EN
		{
			get
			{
				return _roomName_EN;
			}
			set
			{
				SqlString roomName_ENTmp = (SqlString)value;
				if(roomName_ENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomName_EN", "RoomName_EN can't be NULL");
				}
				_roomName_EN = value;
			}
		}


		public SqlString RoomName_AR
		{
			get
			{
				return _roomName_AR;
			}
			set
			{
				SqlString roomName_ARTmp = (SqlString)value;
				if(roomName_ARTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomName_AR", "RoomName_AR can't be NULL");
				}
				_roomName_AR = value;
			}
		}


		public SqlString Description
		{
			get
			{
				return _description;
			}
			set
			{
				SqlString descriptionTmp = (SqlString)value;
				if(descriptionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Description", "Description can't be NULL");
				}
				_description = value;
			}
		}


		public SqlInt32 RoomType_ID
		{
			get
			{
				return _roomType_ID;
			}
			set
			{
				SqlInt32 roomType_IDTmp = (SqlInt32)value;
				if(roomType_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomType_ID", "RoomType_ID can't be NULL");
				}
				_roomType_ID = value;
			}
		}


		public SqlInt32 Property_ID
		{
			get
			{
				return _property_ID;
			}
			set
			{
				SqlInt32 property_IDTmp = (SqlInt32)value;
				if(property_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Property_ID", "Property_ID can't be NULL");
				}
				_property_ID = value;
			}
		}


		public SqlInt32 RoomStatus_ID
		{
			get
			{
				return _roomStatus_ID;
			}
			set
			{
				SqlInt32 roomStatus_IDTmp = (SqlInt32)value;
				if(roomStatus_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomStatus_ID", "RoomStatus_ID can't be NULL");
				}
				_roomStatus_ID = value;
			}
		}


		public SqlInt32 CreatedUser
		{
			get
			{
				return _createdUser;
			}
			set
			{
				SqlInt32 createdUserTmp = (SqlInt32)value;
				if(createdUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedUser", "CreatedUser can't be NULL");
				}
				_createdUser = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				_createdDate = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				SqlInt32 lastModifiedUserTmp = (SqlInt32)value;
				if(lastModifiedUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedUser", "LastModifiedUser can't be NULL");
				}
				_lastModifiedUser = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				SqlDateTime lastModifiedDateTmp = (SqlDateTime)value;
				if(lastModifiedDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedDate", "LastModifiedDate can't be NULL");
				}
				_lastModifiedDate = value;
			}
		}


		public SqlInt32 Number_Of_Beds
		{
			get
			{
				return _number_Of_Beds;
			}
			set
			{
				SqlInt32 number_Of_BedsTmp = (SqlInt32)value;
				if(number_Of_BedsTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Number_Of_Beds", "Number_Of_Beds can't be NULL");
				}
				_number_Of_Beds = value;
			}
		}

        public SqlInt32 Number_Of_BedRooms
        {
            get
            {
                return _number_Of_BedRooms;
            }
            set
            {
                SqlInt32 number_Of_BedRoomsTmp = (SqlInt32)value;
                if (number_Of_BedRoomsTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Number_Of_BedRooms", "Number_Of_BedRooms can't be NULL");
                }
                _number_Of_BedRooms = value;
            }
        }
		public SqlInt32 Number_Of_Bathrooms
		{
			get
			{
				return _number_Of_Bathrooms;
			}
			set
			{
				SqlInt32 number_Of_BathroomsTmp = (SqlInt32)value;
				if(number_Of_BathroomsTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Number_Of_Bathrooms", "Number_Of_Bathrooms can't be NULL");
				}
				_number_Of_Bathrooms = value;
			}
		}


		public SqlInt32 Number_Of_Kitchen
		{
			get
			{
				return _number_Of_Kitchen;
			}
			set
			{
				SqlInt32 number_Of_KitchenTmp = (SqlInt32)value;
				if(number_Of_KitchenTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Number_Of_Kitchen", "Number_Of_Kitchen can't be NULL");
				}
				_number_Of_Kitchen = value;
			}
		}


		public SqlInt32 Number_Of_LivingRooms
		{
			get
			{
				return _number_Of_LivingRooms;
			}
			set
			{
				SqlInt32 number_Of_LivingRoomsTmp = (SqlInt32)value;
				if(number_Of_LivingRoomsTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Number_Of_LivingRooms", "Number_Of_LivingRooms can't be NULL");
				}
				_number_Of_LivingRooms = value;
			}
		}


		public SqlInt32 IsCookingFaclity_Available
		{
			get
			{
				return _isCookingFaclity_Available;
			}
			set
			{
				SqlInt32 isCookingFaclity_AvailableTmp = (SqlInt32)value;
				if(isCookingFaclity_AvailableTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("IsCookingFaclity_Available", "IsCookingFaclity_Available can't be NULL");
				}
				_isCookingFaclity_Available = value;
			}
		}


		public SqlInt32 IsRefregerator_Available
		{
			get
			{
				return _isRefregerator_Available;
			}
			set
			{
				SqlInt32 isRefregerator_AvailableTmp = (SqlInt32)value;
				if(isRefregerator_AvailableTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("IsRefregerator_Available", "IsRefregerator_Available can't be NULL");
				}
				_isRefregerator_Available = value;
			}
		}


		public SqlInt32 Number_Of_TV
		{
			get
			{
				return _number_Of_TV;
			}
			set
			{
				SqlInt32 number_Of_TVTmp = (SqlInt32)value;
				if(number_Of_TVTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Number_Of_TV", "Number_Of_TV can't be NULL");
				}
				_number_Of_TV = value;
			}
		}


		public SqlInt32 MaximumGents_Allowed
		{
			get
			{
				return _maximumGents_Allowed;
			}
			set
			{
				SqlInt32 maximumGents_AllowedTmp = (SqlInt32)value;
				if(maximumGents_AllowedTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MaximumGents_Allowed", "MaximumGents_Allowed can't be NULL");
				}
				_maximumGents_Allowed = value;
			}
		}


		public SqlInt32 MaximumKids_Allowed
		{
			get
			{
				return _maximumKids_Allowed;
			}
			set
			{
				SqlInt32 maximumKids_AllowedTmp = (SqlInt32)value;
				if(maximumKids_AllowedTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MaximumKids_Allowed", "MaximumKids_Allowed can't be NULL");
				}
				_maximumKids_Allowed = value;
			}
		}


		public SqlInt32 MaximumOccupancy_Allowed
		{
			get
			{
				return _maximumOccupancy_Allowed;
			}
			set
			{
				SqlInt32 maximumOccupancy_AllowedTmp = (SqlInt32)value;
				if(maximumOccupancy_AllowedTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MaximumOccupancy_Allowed", "MaximumOccupancy_Allowed can't be NULL");
				}
				_maximumOccupancy_Allowed = value;
			}
		}


		public SqlInt32 Is_Out_Of_Order
		{
			get
			{
				return _is_Out_Of_Order;
			}
			set
			{
				SqlInt32 is_Out_Of_OrderTmp = (SqlInt32)value;
				if(is_Out_Of_OrderTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Is_Out_Of_Order", "Is_Out_Of_Order can't be NULL");
				}
				_is_Out_Of_Order = value;
			}
		}


		public SqlInt32 Out_Of_Order_MarkedBy
		{
			get
			{
				return _out_Of_Order_MarkedBy;
			}
			set
			{
				SqlInt32 out_Of_Order_MarkedByTmp = (SqlInt32)value;
				if(out_Of_Order_MarkedByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Out_Of_Order_MarkedBy", "Out_Of_Order_MarkedBy can't be NULL");
				}
				_out_Of_Order_MarkedBy = value;
			}
		}


		public SqlDateTime Out_Of_Order_FromDate
		{
			get
			{
				return _out_Of_Order_FromDate;
			}
			set
			{
				SqlDateTime out_Of_Order_FromDateTmp = (SqlDateTime)value;
				if(out_Of_Order_FromDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Out_Of_Order_FromDate", "Out_Of_Order_FromDate can't be NULL");
				}
				_out_Of_Order_FromDate = value;
			}
		}


		public SqlDateTime Out_Of_Order_ToDate
		{
			get
			{
				return _out_Of_Order_ToDate;
			}
			set
			{
				SqlDateTime out_Of_Order_ToDateTmp = (SqlDateTime)value;
				if(out_Of_Order_ToDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Out_Of_Order_ToDate", "Out_Of_Order_ToDate can't be NULL");
				}
				_out_Of_Order_ToDate = value;
			}
		}


		public SqlString Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				SqlString remarksTmp = (SqlString)value;
				if(remarksTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Remarks", "Remarks can't be NULL");
				}
				_remarks = value;
			}
		}

        public SqlString RoomType_STR
        {
            get
            {
                return _roomType_str;
            }
            
        }
        public SqlString RoomStatus_STR
        {
            get
            {
                return _roomStatus_str;
            }

        }
        public SqlString Property_STR
        {
            get
            {
                return _property_str;
            }

        }
		#endregion
	}
}
