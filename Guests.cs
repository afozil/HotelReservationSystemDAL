///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Guests'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, May 23, 2015, 10:17:03 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Text;
using System.Collections.Generic;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Guests'.
	/// </summary>
	public class Guests : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_createdDate, _lastModifiedDate, _lastBookingDate,_dateOfBirth;
			private SqlInt32		_createdUser, _lastModifiedUser, _guest_ID, _preferredPayment_Mode, _salutation, _category,_gender,_isBlackListed ;
			private SqlString		_cardNumber, _lastName, _middleName, _firstName, _email, _mobileNumber, _civil_ID,_nationality,_passportNumber, _preferences;
            
		#endregion

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Guests()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FirstName. May be SqlString.Null</LI>
		///		 <LI>MiddleName. May be SqlString.Null</LI>
		///		 <LI>LastName. May be SqlString.Null</LI>
		///		 <LI>Salutation. May be SqlInt32.Null</LI>
		///		 <LI>Civil_ID. May be SqlString.Null</LI>
		///		 <LI>MobileNumber. May be SqlString.Null</LI>
		///		 <LI>Email. May be SqlString.Null</LI>
		///		 <LI>LastBookingDate. May be SqlDateTime.Null</LI>
		///		 <LI>CreatedUser. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>PreferredPayment_Mode. May be SqlInt32.Null</LI>
		///		 <LI>Nationality. May be SqlString.Null</LI>
		///		 <LI>CardNumber. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>Guest_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Guests_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _firstName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMiddleName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _middleName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastName));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSalutation", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _salutation));
                cmdToExecute.Parameters.Add(new SqlParameter("@bGender", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _gender));
                cmdToExecute.Parameters.Add(new SqlParameter("@dDateOfBirth", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dateOfBirth));
                cmdToExecute.Parameters.Add(new SqlParameter("@sCivil_ID", SqlDbType.Char, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _civil_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMobileNumber", SqlDbType.Char, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _mobileNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _email));
				//cmdToExecute.Parameters.Add(new SqlParameter("@daLastBookingDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastBookingDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iPreferredPayment_Mode", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _preferredPayment_Mode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sNationality", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nationality));
				//cmdToExecute.Parameters.Add(new SqlParameter("@sCardNumber", SqlDbType.VarChar, 16, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _cardNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@sPassportNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _passportNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCategory", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _category));
                cmdToExecute.Parameters.Add(new SqlParameter("@bIsBlackListed", SqlDbType.Int, 2, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _isBlackListed));
                cmdToExecute.Parameters.Add(new SqlParameter("@sPreferrences", SqlDbType.NVarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _preferences));
                
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 50, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorDesc));
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.

				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_guest_ID = (SqlInt32)cmdToExecute.Parameters["@iGuest_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Guests_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Guests::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Guest_ID</LI>
		///		 <LI>FirstName. May be SqlString.Null</LI>
		///		 <LI>MiddleName. May be SqlString.Null</LI>
		///		 <LI>LastName. May be SqlString.Null</LI>
		///		 <LI>Salutation. May be SqlInt32.Null</LI>
		///		 <LI>Civil_ID. May be SqlString.Null</LI>
		///		 <LI>MobileNumber. May be SqlString.Null</LI>
		///		 <LI>Email. May be SqlString.Null</LI>
		///		 <LI>LastBookingDate. May be SqlDateTime.Null</LI>
		///		 <LI>CreatedUser. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>PreferredPayment_Mode. May be SqlInt32.Null</LI>
		///		 <LI>Nationality. May be SqlString.Null</LI>
		///		 <LI>CardNumber. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Guests_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _firstName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMiddleName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _middleName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastName));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSalutation", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _salutation));
                cmdToExecute.Parameters.Add(new SqlParameter("@bGender", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _gender));
                cmdToExecute.Parameters.Add(new SqlParameter("@dDateOfBirth", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dateOfBirth));				
                cmdToExecute.Parameters.Add(new SqlParameter("@sCivil_ID", SqlDbType.Char, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _civil_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMobileNumber", SqlDbType.Char, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _mobileNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _email));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastBookingDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastBookingDate));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				//cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iPreferredPayment_Mode", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _preferredPayment_Mode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sNationality", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nationality));
				cmdToExecute.Parameters.Add(new SqlParameter("@sCardNumber", SqlDbType.VarChar, 16, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _cardNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@sPassportNumber", SqlDbType.VarChar, 20, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _passportNumber));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCategory", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _category));
                cmdToExecute.Parameters.Add(new SqlParameter("@bIsBlackListed", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _isBlackListed));
                cmdToExecute.Parameters.Add(new SqlParameter("@sPreferrences", SqlDbType.NVarChar, 500, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _preferences));				
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 50, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorDesc));

                if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Guests_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Guests::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Guest_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Guests_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_Guests_Delete' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Guests::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Guest_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>MiddleName</LI>
		///		 <LI>LastName</LI>
		///		 <LI>Salutation</LI>
		///		 <LI>Civil_ID</LI>
		///		 <LI>MobileNumber</LI>
		///		 <LI>Email</LI>
		///		 <LI>LastBookingDate</LI>
		///		 <LI>CreatedUser</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		///		 <LI>PreferredPayment_Mode</LI>
		///		 <LI>Nationality</LI>
		///		 <LI>CardNumber</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Guests_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Guests");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Guests_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
					_firstName = toReturn.Rows[0]["FirstName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["FirstName"];
					_middleName = toReturn.Rows[0]["MiddleName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MiddleName"];
					_lastName = toReturn.Rows[0]["LastName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["LastName"];
					_salutation = toReturn.Rows[0]["Salutation"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Salutation"];
					_gender = toReturn.Rows[0]["Gender"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Gender"];
                    _dateOfBirth = toReturn.Rows[0]["DateOfBirth"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["DateOfBirth"];
                    _civil_ID = toReturn.Rows[0]["Civil_ID"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Civil_ID"];
					_mobileNumber = toReturn.Rows[0]["MobileNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MobileNumber"];
					_email = toReturn.Rows[0]["Email"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Email"];
					_lastBookingDate = toReturn.Rows[0]["LastBookingDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastBookingDate"];
					_createdUser = toReturn.Rows[0]["CreatedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedUser"];
					_createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
					_preferredPayment_Mode = toReturn.Rows[0]["PreferredPayment_Mode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PreferredPayment_Mode"];
					_nationality = toReturn.Rows[0]["Nationality"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Nationality"];
					_passportNumber = toReturn.Rows[0]["PassportNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["PassportNumber"];
                    _category = toReturn.Rows[0]["Category"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Category"];
                    _cardNumber = toReturn.Rows[0]["CardNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["CardNumber"];
                    _isBlackListed = toReturn.Rows[0]["IsBlackListed"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["IsBlackListed"];
                    _preferences = toReturn.Rows[0]["Preferrences"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Preferrences"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Guests::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Guests_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Guests");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Guests_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Guests::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public override DataTable Search(string tableName, string criteria,string value)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Guests_Search]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Guests");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sColumnName", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, criteria));
                cmdToExecute.Parameters.Add(new SqlParameter("@sSearchValue", SqlDbType.VarChar, 100, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, value));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Guests_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Guests::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt32 Guest_ID
		{
			get
			{
				return _guest_ID;
			}
			set
			{
				SqlInt32 guest_IDTmp = (SqlInt32)value;
				if(guest_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Guest_ID", "Guest_ID can't be NULL");
				}
				_guest_ID = value;
			}
		}


		public SqlString FirstName
		{
			get
			{
				return _firstName;
			}
			set
			{
				_firstName = value;
			}
		}


		public SqlString MiddleName
		{
			get
			{
				return _middleName;
			}
			set
			{
				_middleName = value;
			}
		}


		public SqlString LastName
		{
			get
			{
				return _lastName;
			}
			set
			{
				_lastName = value;
			}
		}


		public SqlInt32 Salutation
		{
			get
			{
				return _salutation;
			}
			set
			{
				_salutation = value;
			}
		}


		public SqlString Civil_ID
		{
			get
			{
				return _civil_ID;
			}
			set
			{
				_civil_ID = value;
			}
		}


		public SqlString MobileNumber
		{
			get
			{
				return _mobileNumber;
			}
			set
			{
				_mobileNumber = value;
			}
		}


		public SqlString Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}


		public SqlDateTime LastBookingDate
		{
			get
			{
				return _lastBookingDate;
			}
			set
			{
				_lastBookingDate = value;
			}
		}


		public SqlInt32 CreatedUser
		{
			get
			{
				return _createdUser;
			}
			set
			{
				_createdUser = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				_createdDate = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				_lastModifiedUser = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				_lastModifiedDate = value;
			}
		}


		public SqlInt32 PreferredPayment_Mode
		{
			get
			{
				return _preferredPayment_Mode;
			}
			set
			{
				_preferredPayment_Mode = value;
			}
		}


		public SqlString Nationality
		{
			get
			{
				return _nationality;
			}
			set
			{
				_nationality = value;
			}
		}


		public SqlString CardNumber
		{
			get
			{
				return _cardNumber;
			}
			set
			{
				_cardNumber = value;
			}
		}

        public SqlDateTime DateOfBirth
        {
            get
            {
                return _dateOfBirth;
            }
            set
            {
                _dateOfBirth = value;
            }
        }

 		public SqlInt32 Category
		{
			get
			{
                return _category;
			}
			set
			{
                _category = value;
			}
		}       

		public SqlString PassportNumber
		{
			get
			{
				return _passportNumber;
			}
			set
			{
				_passportNumber = value;
			}
		}
		public SqlString Preferrences
		{
			get
			{
				return _preferences;
			}
			set
			{
				_preferences = value;
			}
		}

        public SqlInt32 Gender
        {
            get
            {
                return _gender;
            }
            set
            {
                _gender = value;
            }
        }

        public SqlInt32 IsBlackListed
        {
            get
            {
                return _isBlackListed;
            }
            set
            {
                _isBlackListed = value;
            }
        }
		#endregion
	}
}
