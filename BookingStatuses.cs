///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'BookingStatuses'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, June 6, 2015, 10:39:47 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
    /// <summary>
    /// Purpose: Data Access class for the table 'BookingStatuses'.
    /// </summary>
    public class BookingStatuses : DBInteractionBase
    {

        #region Class Member Declarations
        private SqlInt32 _bookingStatus_ID;
        private SqlString _description, _bookingStatus_AR, _bookingStatus_EN;
        #endregion


        /// <summary>
        /// Purpose: Class constructor.
        /// </summary>
        public BookingStatuses()
        {
            // Nothing for now.
        }


        /// <summary>
        /// Purpose: Insert method. This method will insert one new row into the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>BookingStatus_EN</LI>
        ///		 <LI>BookingStatus_AR. May be SqlString.Null</LI>
        ///		 <LI>Description. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>BookingStatus_ID</LI>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Insert()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_BookingStatuses_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@sBookingStatus_EN", SqlDbType.VarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingStatus_EN));
                cmdToExecute.Parameters.Add(new SqlParameter("@sBookingStatus_AR", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingStatus_AR));
                cmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _description));
                cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _bookingStatus_ID = (SqlInt32)cmdToExecute.Parameters["@iBookingStatus_ID"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BookingStatuses_Insert' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BookingStatuses::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Update method. This method will Update one existing row in the database.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>BookingStatus_ID</LI>
        ///		 <LI>BookingStatus_EN</LI>
        ///		 <LI>BookingStatus_AR. May be SqlString.Null</LI>
        ///		 <LI>Description. May be SqlString.Null</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Update()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_BookingStatuses_Update]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@sBookingStatus_EN", SqlDbType.VarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingStatus_EN));
                cmdToExecute.Parameters.Add(new SqlParameter("@sBookingStatus_AR", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingStatus_AR));
                cmdToExecute.Parameters.Add(new SqlParameter("@sDescription", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _description));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BookingStatuses_Update' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BookingStatuses::Update::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
        /// </summary>
        /// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>BookingStatus_ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override bool Delete()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_BookingStatuses_Delete]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BookingStatuses_Delete' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BookingStatuses::Delete::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


        /// <summary>
        /// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties needed for this method: 
        /// <UL>
        ///		 <LI>BookingStatus_ID</LI>
        /// </UL>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        ///		 <LI>BookingStatus_ID</LI>
        ///		 <LI>BookingStatus_EN</LI>
        ///		 <LI>BookingStatus_AR</LI>
        ///		 <LI>Description</LI>
        /// </UL>
        /// Will fill all properties corresponding with a field in the table with the value of the row selected.
        /// </remarks>
        public override DataTable SelectOne()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_BookingStatuses_SelectOne]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("BookingStatuses");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BookingStatuses_SelectOne' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _bookingStatus_ID = (Int32)toReturn.Rows[0]["BookingStatus_ID"];
                    _bookingStatus_EN = (string)toReturn.Rows[0]["BookingStatus_EN"];
                    _bookingStatus_AR = toReturn.Rows[0]["BookingStatus_AR"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["BookingStatus_AR"];
                    _description = toReturn.Rows[0]["Description"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Description"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BookingStatuses::SelectOne::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable SelectAll()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_BookingStatuses_SelectAll]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("BookingStatuses");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_BookingStatuses_SelectAll' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("BookingStatuses::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        #region Class Property Declarations
        public SqlInt32 BookingStatus_ID
        {
            get
            {
                return _bookingStatus_ID;
            }
            set
            {
                SqlInt32 bookingStatus_IDTmp = (SqlInt32)value;
                if (bookingStatus_IDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("BookingStatus_ID", "BookingStatus_ID can't be NULL");
                }
                _bookingStatus_ID = value;
            }
        }


        public SqlString BookingStatus_EN
        {
            get
            {
                return _bookingStatus_EN;
            }
            set
            {
                SqlString bookingStatus_ENTmp = (SqlString)value;
                if (bookingStatus_ENTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("BookingStatus_EN", "BookingStatus_EN can't be NULL");
                }
                _bookingStatus_EN = value;
            }
        }


        public SqlString BookingStatus_AR
        {
            get
            {
                return _bookingStatus_AR;
            }
            set
            {
                SqlString bookingStatus_ARTmp = (SqlString)value;
                if (bookingStatus_ARTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("BookingStatus_AR", "BookingStatus_AR can't be NULL");
                }
                _bookingStatus_AR = value;
            }
        }


        public SqlString Description
        {
            get
            {
                return _description;
            }
            set
            {
                SqlString descriptionTmp = (SqlString)value;
                if (descriptionTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Description", "Description can't be NULL");
                }
                _description = value;
            }
        }
        #endregion
    }
    
    public static class BookingStatus
    {
        public static int CONFIRMED = 1;
        public static int TENTATIVE = 2;
        public static int CANCELLED = 3;
        public static int CHECKED_IN = 4;
        public static int CHECKED_OUT = 5;
    }
    public static class PaymentMode
    {
        public static int CREDIT_CARD = 1;
        public static int DEBIT_CARD = 2;
        public static int CASH = 3;
    }
    public static class GuestCategories
    {
        public static int NORMAL = 4;
        public static int VIP = 5;
        public static int VVIP = 6;
        public static int INTERNET = 7;
    }
    public static class PaymentStatus
    {
        public static int FULLY_PAID = 1;
        public static int PARTIAL_PAID = 2;
        public static int NOT_PAID = 3;
        /* Local*/
        public static int KNET_PROCESSING =1003;
        public static int KNET_ERROR = 1004;
        public static int KNET_SUCCESS = 1005;
        public static int KNET_CANCELED = 1006;

        /* Failaka Online 
        public static int KNET_PROCESSING = 4;
        public static int KNET_ERROR = 5;
        public static int KNET_SUCCESS = 6;
	public static int KNET_CANCELED = 7;
	*/
    }
    public static class RateStatus
    {
        public static int ACTIVE = 1;
        public static int INACTIVE = 2;
        public static int EXPIRED = 3;
        public static int SCHEDULED = 4;
    }
    public static class RoomStatus
    {
        public static int RESERVED = 1002;
        public static int OCCUPIED = 1003;
        public static int DIRTY = 1004;
        public static int READY = 1005;
        public static int MAINTENANCE = 1006;
        public static int OUT_OF_ORDER = 1007;
    }
    public static class EmployeeStatus
    {
        public static int ACTIVE = 1;
        public static int INACTIVE = 2;
        public static int SUSPENDED = 3;
    }
    public static class DiscountStatus
    {
        public static int ACTIVE = 1;
        public static int INACTIVE = 2;
    }
    public static class Unit_Of_Discount
    {
        public static int PERCENTAGE = 2;
        public static int FIXED = 1;
    }
    public static class RATE_TYPES
    {
        public static int WEEKEND = 5;
        public static int SEASONAL = 4;
        public static int RACK = 6;
    }
    public static class CHECK_IN
    {
        public static int HOURS = 14;
        public static int MINUTES = 0;
        public static int SECONDS = 0;
    }
    public static class CHECK_OUT
    {
        public static int HOURS = 11;
        public static int MINUTES = 59;
        public static int SECONDS = 0;
    }
    public static class RATE_STATUS
    {
        public static int ACTIVE = 5;
        public static int INACTIVE = 6;
        public static int DELETED = 7;
    }
    public static class PAYMENT_AVAILED_SERVICETYPES
    {
        public static int RESERVATION = 1;
        public static int BILLS_SERVICES = 2;
        public static int AMENITIES = 3;
        public static int FERRY_ADULTS = 4;
        public static int FERRY_KIDS = 5;
    }
    public static class Roles
    {
        public static string ADMIN = "administrator";
        public static string FRONT_OFFICE = "frontoffice";
        public static string CONFIG_MANAGER = "configmanager";
        public static string HOUSE_KEEPING = "housekeeping";
        public static string SALES = "sales";    
    }
    public static class DBResult
    {
        public static string FAILURE = "Failed";
        public static string SUCCESS = "Success";
        public static string EXCEPTION = "Exception";

    }
    public static class KNET_AppSettingsNames
    {
        public static string ID = "id";
        public static string PASSWORD = "password";
        public static string ACTION = "action";
        public static string ALIAS = "alias";
        public static string CURRENCY_CODE = "currencycode";
        public static string LANGUAGE_ID = "langid";
        public static string KNET_URL = "knet_url";
        public static string RESPONSE_URL = "responseURL";
        public static string ERROR_URL = "errorurl";
        public static string TRACK_ID = "trackId";
    }

    public static class SMTP_AppSettingsNames
    {
        public static string SMTP_SERVER = "smtp_server";
        public static string SMTP_PORT = "smtp_port";
        public static string BACKOFFICE_EMAIL = "backoffice_email";
        public static string BACKOFFICE_PASSWORD = "backoffice_password";
    }

    }
