///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CheckOut'
// Generated by LLBLGen v1.21.2003.712 Final on: Friday, October 23, 2015, 8:17:45 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CheckOut'.
	/// </summary>
	public class CheckOut : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_checkOut_Date;
            private SqlInt32 _checkOut_ID, _checkIn_ID, _reservation_ID, _checkOut_Personnel, _paymentMode, _invoiceID;
			private SqlMoney		_cost_Of_ServicesAmenities, _discountOffered_For_ServicesAmenities, _amountReceived_For_ServicesAmenities, _cost_Of_Reservation, _discountOffered_For_Reservations, _amountReceived_For_Reservation, _finalSettlement;
			private SqlString		_remarks;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CheckOut()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>CheckIn_ID. May be SqlInt32.Null</LI>
		///		 <LI>CheckOut_Date</LI>
		///		 <LI>Cost_Of_Reservation</LI>
		///		 <LI>DiscountOffered_For_Reservations. May be SqlMoney.Null</LI>
		///		 <LI>AmountReceived_For_Reservation</LI>
		///		 <LI>Cost_Of_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>DiscountOffered_For_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>AmountReceived_For_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>CheckOut_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckOut_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckOut_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkOut_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_Of_Reservation", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_Of_Reservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscountOffered_For_Reservations", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discountOffered_For_Reservations));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived_For_Reservation", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amountReceived_For_Reservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_Of_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _cost_Of_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscountOffered_For_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discountOffered_For_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived_For_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _amountReceived_For_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _remarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@curFinalSettlement", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _finalSettlement));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_Personnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkOut_Personnel));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentMode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _checkOut_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_checkOut_ID = (SqlInt32)cmdToExecute.Parameters["@iCheckOut_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_CheckOut_Insert' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckOut::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckOut_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>CheckIn_ID. May be SqlInt32.Null</LI>
		///		 <LI>CheckOut_Date</LI>
		///		 <LI>Cost_Of_Reservation</LI>
		///		 <LI>DiscountOffered_For_Reservations. May be SqlMoney.Null</LI>
		///		 <LI>AmountReceived_For_Reservation</LI>
		///		 <LI>Cost_Of_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>DiscountOffered_For_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>AmountReceived_For_ServicesAmenities. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckOut_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkOut_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckOut_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkOut_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_Of_Reservation", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_Of_Reservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscountOffered_For_Reservations", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discountOffered_For_Reservations));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived_For_Reservation", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amountReceived_For_Reservation));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_Of_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _cost_Of_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscountOffered_For_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discountOffered_For_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived_For_ServicesAmenities", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _amountReceived_For_ServicesAmenities));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _remarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@curFinalSettlement", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _finalSettlement));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckOut_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckOut::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckOut_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckOut_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkOut_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckOut_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckOut::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckOut_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>CheckOut_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>CheckOut_Date</LI>
		///		 <LI>Cost_Of_Reservation</LI>
		///		 <LI>DiscountOffered_For_Reservations</LI>
		///		 <LI>AmountReceived_For_Reservation</LI>
		///		 <LI>Cost_Of_ServicesAmenities</LI>
		///		 <LI>DiscountOffered_For_ServicesAmenities</LI>
		///		 <LI>AmountReceived_For_ServicesAmenities</LI>
		///		 <LI>Remarks</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckOut_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("CheckOut");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkOut_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckOut_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_checkOut_ID = (Int32)toReturn.Rows[0]["CheckOut_ID"];
					_reservation_ID = (Int32)toReturn.Rows[0]["Reservation_ID"];
					_checkIn_ID = toReturn.Rows[0]["CheckIn_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CheckIn_ID"];
					_checkOut_Date = (DateTime)toReturn.Rows[0]["CheckOut_Date"];
					_cost_Of_Reservation = (Decimal)toReturn.Rows[0]["Cost_Of_Reservation"];
					_discountOffered_For_Reservations = toReturn.Rows[0]["DiscountOffered_For_Reservations"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["DiscountOffered_For_Reservations"];
					_amountReceived_For_Reservation = (Decimal)toReturn.Rows[0]["AmountReceived_For_Reservation"];
					_cost_Of_ServicesAmenities = toReturn.Rows[0]["Cost_Of_ServicesAmenities"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Cost_Of_ServicesAmenities"];
					_discountOffered_For_ServicesAmenities = toReturn.Rows[0]["DiscountOffered_For_ServicesAmenities"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["DiscountOffered_For_ServicesAmenities"];
					_amountReceived_For_ServicesAmenities = toReturn.Rows[0]["AmountReceived_For_ServicesAmenities"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["AmountReceived_For_ServicesAmenities"];
					_remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
                    _finalSettlement = toReturn.Rows[0]["Final_Settlement"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Final_Settlement"];
                    _checkOut_Personnel = toReturn.Rows[0]["CheckOut_Personnel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CheckOut_Personnel"];
                    _paymentMode = toReturn.Rows[0]["PaymentMode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PaymentMode"];
                }
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckOut::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckOut_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("CheckOut");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckOut_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckOut::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}



        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>ErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable ConfirmCheckOut()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_CheckOut_Confirm]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckOut");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CheckOut_Confirm' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckOut::SelectAll::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public DataTable GetInvoiceByCheckOutID(string checkoutID)
        {
            //  string sqlQuery = "select CheckOut_ID,CO.CheckIn_ID,CO.CheckOut_Date,Number_Of_DaysStayed,TotalBoarding_Amount,Additional_Invoice_Amount,TotalFacilitiesAvailed_Amount,Paid_Amount,Outstanding_Amount,Settlement_Amount,CheckIn_Date,CheckIn_Personnel,G.Guest_ID ,FirstName,MiddleName,LastName,Salutation,Gender from CheckOut CO,CheckIn CI,Guests G where CO.CheckIn_ID=CI.CheckIn_ID and CI.Guest_ID=G.Guest_ID and CO.CheckOut_ID=" + checkoutID;
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "[pr_CheckOut_SelectBillByID]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckOut");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, checkoutID));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckOut::GetInvoiceByCheckOutID::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable GetInvoiceByCheckOutReservationID(string reservationID)
        {
            //  string sqlQuery = "select CheckOut_ID,CO.CheckIn_ID,CO.CheckOut_Date,Number_Of_DaysStayed,TotalBoarding_Amount,Additional_Invoice_Amount,TotalFacilitiesAvailed_Amount,Paid_Amount,Outstanding_Amount,Settlement_Amount,CheckIn_Date,CheckIn_Personnel,G.Guest_ID ,FirstName,MiddleName,LastName,Salutation,Gender from CheckOut CO,CheckIn CI,Guests G where CO.CheckIn_ID=CI.CheckIn_ID and CI.Guest_ID=G.Guest_ID and CO.CheckOut_ID=" + checkoutID;
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "pr_CheckOut_SelectBillByReservatioID";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckOut");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@Reservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, reservationID));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckOut::GetInvoiceByCheckOutID::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public  bool InsertInvoice()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[InvoiceInsert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@InvoiceNo", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _invoiceID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
              //  cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _invoiceID = (SqlInt32)cmdToExecute.Parameters["@invoiceID"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    //throw new Exception("Stored Procedure 'pr_CheckOut_Insert' reported the ErrorCode: " + _errorCode);
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckOut::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		#region Class Property Declarations

        public SqlInt32 CheckOut_Personnel
        {
            get
            {
                return _checkOut_Personnel;
            }
            set
            {
                SqlInt32 checkOut_PersonnelTmp = (SqlInt32)value;
                if (checkOut_PersonnelTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("CheckOut_Personnel", "CheckOut_Personnel can't be NULL");
                }
                _checkOut_Personnel = value;
            }
        }


		public SqlInt32 CheckOut_ID
		{
			get
			{
				return _checkOut_ID;
			}
			set
			{
				SqlInt32 checkOut_IDTmp = (SqlInt32)value;
				if(checkOut_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckOut_ID", "CheckOut_ID can't be NULL");
				}
				_checkOut_ID = value;
			}
		}
        		public SqlInt32 Invoice_ID
		{
			get
			{
                return _invoiceID;
			}
			set
			{
                SqlInt32 Invoice_IDTmp = (SqlInt32)value;
                if (Invoice_IDTmp.IsNull)
				{
                    throw new ArgumentOutOfRangeException("Invoice_ID", "Invoice_ID can't be NULL");
				}
                _invoiceID = value;
			}
		}
        

		public SqlInt32 Reservation_ID
		{
			get
			{
				return _reservation_ID;
			}
			set
			{
				SqlInt32 reservation_IDTmp = (SqlInt32)value;
				if(reservation_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Reservation_ID", "Reservation_ID can't be NULL");
				}
				_reservation_ID = value;
			}
		}


		public SqlInt32 CheckIn_ID
		{
			get
			{
				return _checkIn_ID;
			}
			set
			{
				_checkIn_ID = value;
			}
		}

        public SqlInt32 PaymentMode
        {
            get
            {
                return _paymentMode;
            }
            set
            {
                _paymentMode = value;
            }
        }




		public SqlDateTime CheckOut_Date
		{
			get
			{
				return _checkOut_Date;
			}
			set
			{
				SqlDateTime checkOut_DateTmp = (SqlDateTime)value;
				if(checkOut_DateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckOut_Date", "CheckOut_Date can't be NULL");
				}
				_checkOut_Date = value;
			}
		}


		public SqlMoney Cost_Of_Reservation
		{
			get
			{
				return _cost_Of_Reservation;
			}
			set
			{
				SqlMoney cost_Of_ReservationTmp = (SqlMoney)value;
				if(cost_Of_ReservationTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Cost_Of_Reservation", "Cost_Of_Reservation can't be NULL");
				}
				_cost_Of_Reservation = value;
			}
		}


		public SqlMoney DiscountOffered_For_Reservations
		{
			get
			{
				return _discountOffered_For_Reservations;
			}
			set
			{
				_discountOffered_For_Reservations = value;
			}
		}


		public SqlMoney AmountReceived_For_Reservation
		{
			get
			{
				return _amountReceived_For_Reservation;
			}
			set
			{
				SqlMoney amountReceived_For_ReservationTmp = (SqlMoney)value;
				if(amountReceived_For_ReservationTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("AmountReceived_For_Reservation", "AmountReceived_For_Reservation can't be NULL");
				}
				_amountReceived_For_Reservation = value;
			}
		}


		public SqlMoney Cost_Of_ServicesAmenities
		{
			get
			{
				return _cost_Of_ServicesAmenities;
			}
			set
			{
				_cost_Of_ServicesAmenities = value;
			}
		}


		public SqlMoney DiscountOffered_For_ServicesAmenities
		{
			get
			{
				return _discountOffered_For_ServicesAmenities;
			}
			set
			{
				_discountOffered_For_ServicesAmenities = value;
			}
		}


		public SqlMoney AmountReceived_For_ServicesAmenities
		{
			get
			{
				return _amountReceived_For_ServicesAmenities;
			}
			set
			{
				_amountReceived_For_ServicesAmenities = value;
			}
		}

        public SqlMoney FinalSettlementAmount
        {
            get
            {
                return _finalSettlement;
            }
            set
            {
                _finalSettlement = value;
            }
        }

		public SqlString Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				_remarks = value;
			}
		}
		#endregion
	}
}
