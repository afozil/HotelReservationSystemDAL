///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'CheckIn'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, June 8, 2015, 9:51:50 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'CheckIn'.
	/// </summary>
	public class CheckIn : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_lastModifiedDate, _checkIn_Date, _checkOut_Date;
			private SqlInt32		_lastModifiedUser, _checkIn_Personnel, _isTotalAmountSettled, _checkIn_ID, _booking_ID, _reservation_ID, _guest_ID, _connected_Room_ID, _room_ID,_pendingPayment_mode;
			private SqlMoney		_settled_Amount;
			private SqlString		_remarks;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public CheckIn()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Booking_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID. May be SqlInt32.Null</LI>
		///		 <LI>Connected_Room_ID. May be SqlInt32.Null</LI>
		///		 <LI>CheckIn_Date</LI>
		///		 <LI>CheckOut_Date. May be SqlDateTime.Null</LI>
		///		 <LI>CheckIn_Personnel. May be SqlInt32.Null</LI>
		///		 <LI>IsTotalAmountSettled. May be SqlInt32.Null</LI>
		///		 <LI>Pending_Amount. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckIn_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckIn_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkIn_Date));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_Personnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_Personnel));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));
                

                /*cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iConnected_Room_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _connected_Room_ID));
				
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckOut_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkOut_Date));
				
                cmdToExecute.Parameters.Add(new SqlParameter("@iIsTotalAmountSettled", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isTotalAmountSettled));
                cmdToExecute.Parameters.Add(new SqlParameter("@curSettled_Amount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _settled_Amount));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _pendingPayment_mode));
                
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				*/
				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_checkIn_ID = (SqlInt32)cmdToExecute.Parameters["@iCheckIn_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_CheckIn_Insert' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckIn::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>Booking_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID. May be SqlInt32.Null</LI>
		///		 <LI>Connected_Room_ID. May be SqlInt32.Null</LI>
		///		 <LI>CheckIn_Date</LI>
		///		 <LI>CheckOut_Date. May be SqlDateTime.Null</LI>
		///		 <LI>CheckIn_Personnel. May be SqlInt32.Null</LI>
		///		 <LI>IsTotalAmountSettled. May be SqlInt32.Null</LI>
		///		 <LI>Pending_Amount. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckIn_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iConnected_Room_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _connected_Room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckIn_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkIn_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCheckOut_Date", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _checkOut_Date));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_Personnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_Personnel));
				cmdToExecute.Parameters.Add(new SqlParameter("@iIsTotalAmountSettled", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _isTotalAmountSettled));
                cmdToExecute.Parameters.Add(new SqlParameter("@curSettled_Amount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _settled_Amount));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _pendingPayment_mode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckIn_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckIn::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckIn_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckIn_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckIn_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckIn::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckIn_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>Booking_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID</LI>
		///		 <LI>Connected_Room_ID</LI>
		///		 <LI>CheckIn_Date</LI>
		///		 <LI>CheckOut_Date</LI>
		///		 <LI>CheckIn_Personnel</LI>
		///		 <LI>IsTotalAmountSettled</LI>
		///		 <LI>Pending_Amount</LI>
		///		 <LI>Remarks</LI>
		///		 <LI>LastModifiedDate</LI>
		///		 <LI>LastModifiedUser</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckIn_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("CheckIn");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckIn_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_checkIn_ID = (Int32)toReturn.Rows[0]["CheckIn_ID"];
					_reservation_ID = (Int32)toReturn.Rows[0]["Reservation_ID"];
                    _checkIn_Date = (DateTime)toReturn.Rows[0]["CheckIn_Date"];
                    _checkIn_Personnel = toReturn.Rows[0]["CheckIn_Personnel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CheckIn_Personnel"];
                    _remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
					/*
                    _guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
					_room_ID = toReturn.Rows[0]["Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Room_ID"];
					_connected_Room_ID = toReturn.Rows[0]["Connected_Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Connected_Room_ID"];
					
					_checkOut_Date = toReturn.Rows[0]["CheckOut_Date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CheckOut_Date"];
					
					_isTotalAmountSettled = toReturn.Rows[0]["IsTotalAmountSettled"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["IsTotalAmountSettled"];
                    _settled_Amount = toReturn.Rows[0]["Settled_Amount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Settled_Amount"];
                    _pendingPayment_mode = toReturn.Rows[0]["PaymentMode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PaymentMode"];
                    
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
				    */
                      }
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckIn::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_CheckIn_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("CheckIn");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_CheckIn_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("CheckIn::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public DataTable SelectAll_Active()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_CheckIn_SelectAll_Active]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckIn");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CheckIn_SelectAll_Active' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckIn::SelectAll_Active::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public  DataTable SelectByRoomID()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_CheckIn_SelectByRoomID]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckIn");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iRoomID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CheckIn_SelectByRoomID' reported the ErrorCode: " + _errorCode);
                }
                if (toReturn.Rows.Count > 0)
                {
                    _checkIn_ID = (Int32)toReturn.Rows[0]["CheckIn_ID"];
                    _booking_ID = (Int32)toReturn.Rows[0]["Booking_ID"];
                    _guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
                    _room_ID = toReturn.Rows[0]["Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Room_ID"];
                    _connected_Room_ID = toReturn.Rows[0]["Connected_Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Connected_Room_ID"];
                    _checkIn_Date = (DateTime)toReturn.Rows[0]["CheckIn_Date"];
                    _checkOut_Date = toReturn.Rows[0]["CheckOut_Date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CheckOut_Date"];
                    _checkIn_Personnel = toReturn.Rows[0]["CheckIn_Personnel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CheckIn_Personnel"];
                    _isTotalAmountSettled = toReturn.Rows[0]["IsTotalAmountSettled"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["IsTotalAmountSettled"];
                    _settled_Amount = toReturn.Rows[0]["Settled_Amount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Settled_Amount"];
                    _pendingPayment_mode = toReturn.Rows[0]["PaymentMode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PaymentMode"];
                    _remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
                    _lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
                    _lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckIn::SelectByRoomID::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectOne_ByRoomID()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_CheckIn_SelectOne_ByRoomID]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckIn");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CheckIn_SelectByRoomID' reported the ErrorCode: " + _errorCode);
                }
                if (toReturn.Rows.Count > 0)
                {
                    _checkIn_ID = (Int32)toReturn.Rows[0]["CheckIn_ID"];
                    _booking_ID = (Int32)toReturn.Rows[0]["Booking_ID"];
                    _guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
                    _room_ID = toReturn.Rows[0]["Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Room_ID"];
                    _connected_Room_ID = toReturn.Rows[0]["Connected_Room_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Connected_Room_ID"];
                    _checkIn_Date = (DateTime)toReturn.Rows[0]["CheckIn_Date"];
                    _checkOut_Date = toReturn.Rows[0]["CheckOut_Date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CheckOut_Date"];
                    _checkIn_Personnel = toReturn.Rows[0]["CheckIn_Personnel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CheckIn_Personnel"];
                    _isTotalAmountSettled = toReturn.Rows[0]["IsTotalAmountSettled"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["IsTotalAmountSettled"];
                    _settled_Amount = toReturn.Rows[0]["Settled_Amount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Settled_Amount"];
                    _pendingPayment_mode = toReturn.Rows[0]["PaymentMode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PaymentMode"];
                    _remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
                    _lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
                    _lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckIn::SelectByRoomID::Error occured."+ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectOne_ByReservationID()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_SelectByRID_ForCard]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("CheckIn");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_CheckIn_SelectByRoomID' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("CheckIn::SelectByRoomID::Error occured." + ex.Message, ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }



        #region Class Property Declarations
        public SqlInt32 CheckIn_ID
		{
			get
			{
				return _checkIn_ID;
			}
			set
			{
				SqlInt32 checkIn_IDTmp = (SqlInt32)value;
				if(checkIn_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckIn_ID", "CheckIn_ID can't be NULL");
				}
				_checkIn_ID = value;
			}
		}


		public SqlInt32 Booking_ID
		{
			get
			{
				return _booking_ID;
			}
			set
			{
				SqlInt32 booking_IDTmp = (SqlInt32)value;
				if(booking_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Booking_ID", "Booking_ID can't be NULL");
				}
				_booking_ID = value;
			}
		}

        public SqlInt32 Reservation_ID
        {
            get
            {
                return _reservation_ID;
            }
            set
            {
                SqlInt32 booking_IDTmp = (SqlInt32)value;
                if (booking_IDTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Reservation_ID", "Reservation_ID can't be NULL");
                }
                _reservation_ID = value;
            }
        }

		public SqlInt32 Guest_ID
		{
			get
			{
				return _guest_ID;
			}
			set
			{
				SqlInt32 guest_IDTmp = (SqlInt32)value;
				if(guest_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Guest_ID", "Guest_ID can't be NULL");
				}
				_guest_ID = value;
			}
		}


		public SqlInt32 Room_ID
		{
			get
			{
				return _room_ID;
			}
			set
			{
				SqlInt32 room_IDTmp = (SqlInt32)value;
				if(room_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Room_ID", "Room_ID can't be NULL");
				}
				_room_ID = value;
			}
		}


		public SqlInt32 Connected_Room_ID
		{
			get
			{
				return _connected_Room_ID;
			}
			set
			{
				SqlInt32 connected_Room_IDTmp = (SqlInt32)value;
				if(connected_Room_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Connected_Room_ID", "Connected_Room_ID can't be NULL");
				}
				_connected_Room_ID = value;
			}
		}


		public SqlDateTime CheckIn_Date
		{
			get
			{
				return _checkIn_Date;
			}
			set
			{
				SqlDateTime checkIn_DateTmp = (SqlDateTime)value;
				if(checkIn_DateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckIn_Date", "CheckIn_Date can't be NULL");
				}
				_checkIn_Date = value;
			}
		}


		public SqlDateTime CheckOut_Date
		{
			get
			{
				return _checkOut_Date;
			}
			set
			{
				SqlDateTime checkOut_DateTmp = (SqlDateTime)value;
				if(checkOut_DateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckOut_Date", "CheckOut_Date can't be NULL");
				}
				_checkOut_Date = value;
			}
		}


		public SqlInt32 CheckIn_Personnel
		{
			get
			{
				return _checkIn_Personnel;
			}
			set
			{
				SqlInt32 checkIn_PersonnelTmp = (SqlInt32)value;
				if(checkIn_PersonnelTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckIn_Personnel", "CheckIn_Personnel can't be NULL");
				}
				_checkIn_Personnel = value;
			}
		}


		public SqlInt32 IsTotalAmountSettled
		{
			get
			{
				return _isTotalAmountSettled;
			}
			set
			{
				SqlInt32 isTotalAmountSettledTmp = (SqlInt32)value;
				if(isTotalAmountSettledTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("IsTotalAmountSettled", "IsTotalAmountSettled can't be NULL");
				}
				_isTotalAmountSettled = value;
			}
		}


		public SqlMoney Settled_Amount
		{
			get
			{
				return _settled_Amount;
			}
			set
			{
				SqlMoney settled_AmountTmp = (SqlMoney)value;
                if (settled_AmountTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Settled_Amount", "Settled_Amount can't be NULL");
				}
                _settled_Amount = value;
			}
		}


		public SqlString Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				SqlString remarksTmp = (SqlString)value;
				if(remarksTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Remarks", "Remarks can't be NULL");
				}
				_remarks = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				SqlDateTime lastModifiedDateTmp = (SqlDateTime)value;
				if(lastModifiedDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedDate", "LastModifiedDate can't be NULL");
				}
				_lastModifiedDate = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				SqlInt32 lastModifiedUserTmp = (SqlInt32)value;
				if(lastModifiedUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedUser", "LastModifiedUser can't be NULL");
				}
				_lastModifiedUser = value;
			}
		}

        public SqlInt32 PendingPayment_Mode
        {
            get
            {
                return _pendingPayment_mode;
            }
            set
            {
                _pendingPayment_mode = value;
            }
        }
		#endregion
	}
}
