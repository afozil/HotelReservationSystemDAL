///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'SecondaryGuests'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, October 10, 2015, 10:20:25 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'SecondaryGuests'.
	/// </summary>
	public class SecondaryGuests : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		_civil_ID, _mobileNumber;
			private SqlDateTime		_lastModifiedDate;
			private SqlInt32		_gender, _secondaryGuest_ID, _lastModifiedUser, _age, _salutation, _relationShip_ID, _reservation_ID, _guest_ID;
			private SqlString		_lastName, _middleName, _firstName, _email;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public SecondaryGuests()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Guest_ID</LI>
		///		 <LI>RelationShip_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>MiddleName. May be SqlString.Null</LI>
		///		 <LI>LastName. May be SqlString.Null</LI>
		///		 <LI>Salutation. May be SqlInt32.Null</LI>
		///		 <LI>Gender</LI>
		///		 <LI>Civil_ID</LI>
		///		 <LI>MobileNumber. May be SqlString.Null</LI>
		///		 <LI>Email. May be SqlString.Null</LI>
		///		 <LI>Age</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>SecondaryGuest_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_SecondaryGuests_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRelationShip_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _relationShip_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _firstName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMiddleName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _middleName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastName));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSalutation", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _salutation));
				cmdToExecute.Parameters.Add(new SqlParameter("@iGender", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _gender));
				cmdToExecute.Parameters.Add(new SqlParameter("@sCivil_ID", SqlDbType.Char, 12, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _civil_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMobileNumber", SqlDbType.Char, 12, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _mobileNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _email));
				cmdToExecute.Parameters.Add(new SqlParameter("@iAge", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _age));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSecondaryGuest_ID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _secondaryGuest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_secondaryGuest_ID = (SqlInt32)cmdToExecute.Parameters["@iSecondaryGuest_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_SecondaryGuests_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("SecondaryGuests::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SecondaryGuest_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>RelationShip_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>MiddleName. May be SqlString.Null</LI>
		///		 <LI>LastName. May be SqlString.Null</LI>
		///		 <LI>Salutation. May be SqlInt32.Null</LI>
		///		 <LI>Gender</LI>
		///		 <LI>Civil_ID</LI>
		///		 <LI>MobileNumber. May be SqlString.Null</LI>
		///		 <LI>Email. May be SqlString.Null</LI>
		///		 <LI>Age</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_SecondaryGuests_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iSecondaryGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _secondaryGuest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRelationShip_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _relationShip_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _firstName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMiddleName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _middleName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sLastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastName));
				cmdToExecute.Parameters.Add(new SqlParameter("@iSalutation", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _salutation));
				cmdToExecute.Parameters.Add(new SqlParameter("@iGender", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _gender));
				cmdToExecute.Parameters.Add(new SqlParameter("@sCivil_ID", SqlDbType.Char, 12, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _civil_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sMobileNumber", SqlDbType.Char, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _mobileNumber));
				cmdToExecute.Parameters.Add(new SqlParameter("@sEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _email));
				cmdToExecute.Parameters.Add(new SqlParameter("@iAge", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _age));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_SecondaryGuests_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("SecondaryGuests::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SecondaryGuest_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_SecondaryGuests_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iSecondaryGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _secondaryGuest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_SecondaryGuests_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("SecondaryGuests::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>SecondaryGuest_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>SecondaryGuest_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>RelationShip_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>FirstName</LI>
		///		 <LI>MiddleName</LI>
		///		 <LI>LastName</LI>
		///		 <LI>Salutation</LI>
		///		 <LI>Gender</LI>
		///		 <LI>Civil_ID</LI>
		///		 <LI>MobileNumber</LI>
		///		 <LI>Email</LI>
		///		 <LI>Age</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_SecondaryGuests_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("SecondaryGuests");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iSecondaryGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _secondaryGuest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_SecondaryGuests_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_secondaryGuest_ID = (Int32)toReturn.Rows[0]["SecondaryGuest_ID"];
                    _guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
                    _relationShip_ID = (Int32)toReturn.Rows[0]["RelationShip_ID"];
                    _reservation_ID = (Int32)toReturn.Rows[0]["Reservation_ID"];
					_firstName = (string)toReturn.Rows[0]["FirstName"];
					_middleName = toReturn.Rows[0]["MiddleName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MiddleName"];
					_lastName = toReturn.Rows[0]["LastName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["LastName"];
                    _salutation = toReturn.Rows[0]["Salutation"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Salutation"];
                    _gender = (Int32)toReturn.Rows[0]["Gender"];
					_civil_ID = (string)toReturn.Rows[0]["Civil_ID"];
					_mobileNumber = toReturn.Rows[0]["MobileNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MobileNumber"];
					_email = toReturn.Rows[0]["Email"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Email"];
                    _age = (Int32)toReturn.Rows[0]["Age"];
                    _lastModifiedUser = (Int32)toReturn.Rows[0]["LastModifiedUser"];
					_lastModifiedDate = (DateTime)toReturn.Rows[0]["LastModifiedDate"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("SecondaryGuests::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_SecondaryGuests_SelectByReservation]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("SecondaryGuests");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
                    throw new Exception("Stored Procedure 'pr_SecondaryGuests_SelectByReservation' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("SecondaryGuests::SelectByReservation::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 SecondaryGuest_ID
		{
			get
			{
				return _secondaryGuest_ID;
			}
			set
			{
				SqlInt32 secondaryGuest_IDTmp = (SqlInt32)value;
				if(secondaryGuest_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SecondaryGuest_ID", "SecondaryGuest_ID can't be NULL");
				}
				_secondaryGuest_ID = value;
			}
		}


		public SqlInt32 Guest_ID
		{
			get
			{
				return _guest_ID;
			}
			set
			{
				SqlInt32 guest_IDTmp = (SqlInt32)value;
				if(guest_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Guest_ID", "Guest_ID can't be NULL");
				}
				_guest_ID = value;
			}
		}


		public SqlInt32 RelationShip_ID
		{
			get
			{
				return _relationShip_ID;
			}
			set
			{
				SqlInt32 relationShip_IDTmp = (SqlInt32)value;
				if(relationShip_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RelationShip_ID", "RelationShip_ID can't be NULL");
				}
				_relationShip_ID = value;
			}
		}


		public SqlInt32 Reservation_ID
		{
			get
			{
				return _reservation_ID;
			}
			set
			{
				SqlInt32 reservation_IDTmp = (SqlInt32)value;
				if(reservation_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Reservation_ID", "Reservation_ID can't be NULL");
				}
				_reservation_ID = value;
			}
		}


		public SqlString FirstName
		{
			get
			{
				return _firstName;
			}
			set
			{
				SqlString firstNameTmp = (SqlString)value;
				if(firstNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FirstName", "FirstName can't be NULL");
				}
				_firstName = value;
			}
		}


		public SqlString MiddleName
		{
			get
			{
				return _middleName;
			}
			set
			{
				_middleName = value;
			}
		}


		public SqlString LastName
		{
			get
			{
				return _lastName;
			}
			set
			{
				_lastName = value;
			}
		}


		public SqlInt32 Salutation
		{
			get
			{
				return _salutation;
			}
			set
			{
				_salutation = value;
			}
		}


		public SqlInt32 Gender
		{
			get
			{
				return _gender;
			}
			set
			{
				SqlInt32 genderTmp = (SqlInt32)value;
				if(genderTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Gender", "Gender can't be NULL");
				}
				_gender = value;
			}
		}


		public SqlString Civil_ID
		{
			get
			{
				return _civil_ID;
			}
			set
			{
				SqlString civil_IDTmp = (SqlString)value;
				if(civil_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Civil_ID", "Civil_ID can't be NULL");
				}
				_civil_ID = value;
			}
		}


		public SqlString MobileNumber
		{
			get
			{
				return _mobileNumber;
			}
			set
			{
				_mobileNumber = value;
			}
		}


		public SqlString Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}


		public SqlInt32 Age
		{
			get
			{
				return _age;
			}
			set
			{
				SqlInt32 ageTmp = (SqlInt32)value;
				if(ageTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Age", "Age can't be NULL");
				}
				_age = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				SqlInt32 lastModifiedUserTmp = (SqlInt32)value;
				if(lastModifiedUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedUser", "LastModifiedUser can't be NULL");
				}
				_lastModifiedUser = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				SqlDateTime lastModifiedDateTmp = (SqlDateTime)value;
				if(lastModifiedDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedDate", "LastModifiedDate can't be NULL");
				}
				_lastModifiedDate = value;
			}
		}
		#endregion
	}
}
