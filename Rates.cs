///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Rates'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, May 23, 2015, 10:17:03 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Text;
using System.Collections;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Rates'.
	/// </summary>
	public class Rates : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_fromDate, _lastModifiedDate, _createdDate, _toDate;
			private SqlInt32		_createdUser, _rate_ID, _lastModifiedUser, _rateType, _rateStatus;
			private SqlMoney		_rate;
			private SqlString		_rateDescription_AR, _rateDescription_EN;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Rates()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RateType</LI>
		///		 <LI>RateDescription_EN</LI>
		///		 <LI>RateDescription_AR. May be SqlString.Null</LI>
		///		 <LI>FromDate</LI>
		///		 <LI>ToDate</LI>
		///		 <LI>Rate</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>CreatedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>Rate_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rates_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRateType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rateType));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRateStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rateStatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRateDescription_EN", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _rateDescription_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRateDescription_AR", SqlDbType.NVarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _rateDescription_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _toDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curRate", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _rate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_rate_ID = (SqlInt32)cmdToExecute.Parameters["@iRate_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@iErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rates_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rates::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Rate_ID</LI>
		///		 <LI>RateType</LI>
		///		 <LI>RateDescription_EN</LI>
		///		 <LI>RateDescription_AR. May be SqlString.Null</LI>
		///		 <LI>FromDate</LI>
		///		 <LI>ToDate</LI>
		///		 <LI>Rate</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>CreatedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rates_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRateType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rateType));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRateStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rateStatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRateDescription_EN", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _rateDescription_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRateDescription_AR", SqlDbType.NVarChar, 100, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _rateDescription_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _toDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curRate", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _rate));
				//cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iCreatedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@iErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_Rates_Update' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rates::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Rate_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rates_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					//throw new Exception("Stored Procedure 'pr_Rates_Delete' reported the ErrorCode: " + _errorCode);
                    return false;
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rates::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Rate_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Rate_ID</LI>
		///		 <LI>RateType</LI>
		///		 <LI>RateDescription_EN</LI>
		///		 <LI>RateDescription_AR</LI>
		///		 <LI>FromDate</LI>
		///		 <LI>ToDate</LI>
		///		 <LI>Rate</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>CreatedUser</LI>
		///		 <LI>LastModifiedUser</LI>
		///		 <LI>LastModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rates_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Rates");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rates_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_rate_ID = (Int32)toReturn.Rows[0]["Rate_ID"];
					_rateType = (Int32)toReturn.Rows[0]["RateType"];
                    _rateStatus = toReturn.Rows[0]["RateStatus"] == System.DBNull.Value ? 2 : (Int32)toReturn.Rows[0]["RateStatus"];
					_rateDescription_EN = (string)toReturn.Rows[0]["RateDescription_EN"];
					_rateDescription_AR = toReturn.Rows[0]["RateDescription_AR"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["RateDescription_AR"];
					_fromDate = (DateTime)toReturn.Rows[0]["FromDate"];
					_toDate = (DateTime)toReturn.Rows[0]["ToDate"];
					_rate = (Decimal)toReturn.Rows[0]["Rate"];
					_createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
					_createdUser = toReturn.Rows[0]["CreatedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedUser"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rates::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public  DataTable SelectByRateType()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Rates_SelectByRateType]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Rates");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iRateType_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rateType));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Rates_SelectByRateType' reported the ErrorCode: " + _errorCode);
                }

                if (toReturn.Rows.Count > 0)
                {
                    _rate_ID = (Int32)toReturn.Rows[0]["Rate_ID"];
                    _rateType = (Int32)toReturn.Rows[0]["RateType"];
                    _rateStatus = toReturn.Rows[0]["RateStatus"] == System.DBNull.Value ? 2 : (Int32)toReturn.Rows[0]["RateStatus"];
                    _rateDescription_EN = (string)toReturn.Rows[0]["RateDescription_EN"];
                    _rateDescription_AR = toReturn.Rows[0]["RateDescription_AR"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["RateDescription_AR"];
                    _fromDate = (DateTime)toReturn.Rows[0]["FromDate"];
                    _toDate = (DateTime)toReturn.Rows[0]["ToDate"];
                    _rate = (Decimal)toReturn.Rows[0]["Rate"];
                    _createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
                    _createdUser = toReturn.Rows[0]["CreatedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedUser"];
                    _lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
                    _lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
                }
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rates::SelectByRateType::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Rates_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Rates");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Rates_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Rates::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


        public DataTable Search(Hashtable srchCriteria)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            StringBuilder sb = new StringBuilder("SELECT r.[Rate_ID],r.[RateType],r.[RateDescription_EN],r.[RateDescription_AR],r.[FromDate],r.[ToDate],r.[Rate],r.[CreatedDate],r.[CreatedUser],r.[LastModifiedUser],r.[LastModifiedDate],emp.[FirstName] + emp.[LastName]  as Modified_By,rt.RateType as RateTypeName");
            sb.Append(" FROM [Rates] r inner join  RateTypes rt on r.RateType=rt.RateType_ID inner join Employees emp on r.LastModifiedUser=emp.Employee_ID");
            sb.Append(" WHERE ");
            sb.Append(srchCriteria);
            int len = srchCriteria != null ? srchCriteria.Count : 0;
            int counter = 0;
            if (len > 0)
            {
                foreach (DictionaryEntry entry in srchCriteria)
                {
                    if (counter != 0)
                        sb.Append(" AND ");
                    sb.Append(entry.Key.ToString());
                    sb.Append(" = ");
                    sb.Append(entry.Value.ToString());
                    ++counter;
                }
            }

            sb.Append(" ORDER BY [Rate_ID] ASC");
            Console.WriteLine(sb.ToString());
            cmdToExecute.CommandText = sb.ToString();
            cmdToExecute.CommandType = CommandType.Text;
            DataTable toReturn = new DataTable("Rates");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                //adapter.Fill(toReturn);
                /*
                 _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                 if (_errorCode != (int)LLBLError.AllOk)
                 {
                     // Throw error.
                     throw new Exception("Stored Procedure 'pr_Guests_SelectOne' reported the ErrorCode: " + _errorCode);
                 }
                
                if (toReturn.Rows.Count > 0)
                {
                    _guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
                    _firstName = toReturn.Rows[0]["FirstName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["FirstName"];
                    _middleName = toReturn.Rows[0]["MiddleName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MiddleName"];
                    _lastName = toReturn.Rows[0]["LastName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["LastName"];
                    _salutation = toReturn.Rows[0]["Salutation"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Salutation"];
                    _civil_ID = toReturn.Rows[0]["Civil_ID"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Civil_ID"];
                    _mobileNumber = toReturn.Rows[0]["MobileNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MobileNumber"];
                    _email = toReturn.Rows[0]["Email"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Email"];
                    _lastBookingDate = toReturn.Rows[0]["LastBookingDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastBookingDate"];
                    _createdUser = toReturn.Rows[0]["CreatedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedUser"];
                    _createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
                    _lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
                    _lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
                    _preferredPayment_Mode = toReturn.Rows[0]["PreferredPayment_Mode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PreferredPayment_Mode"];
                    _nationality = toReturn.Rows[0]["Nationality"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Nationality"];
                    _cardNumber = toReturn.Rows[0]["CardNumber"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["CardNumber"];
                } */
                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rates::Search::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public  DataTable SelectAllRateStatuses()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Rates_SelectAllRateStatuses]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RateStatuses");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Rates_SelectAllRateStatuses' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Rates::SelectAllRateStatuses::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt32 Rate_ID
		{
			get
			{
				return _rate_ID;
			}
			set
			{
				SqlInt32 rate_IDTmp = (SqlInt32)value;
				if(rate_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Rate_ID", "Rate_ID can't be NULL");
				}
				_rate_ID = value;
			}
		}


		public SqlInt32 RateType
		{
			get
			{
				return _rateType;
			}
			set
			{
				SqlInt32 rateTypeTmp = (SqlInt32)value;
				if(rateTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RateType", "RateType can't be NULL");
				}
				_rateType = value;
			}
		}
        public SqlInt32 RateStatus
        {
            get
            {
                return _rateStatus;
            }
            set
            {
                _rateStatus = value;
            }
        }

		public SqlString RateDescription_EN
		{
			get
			{
				return _rateDescription_EN;
			}
			set
			{
				SqlString rateDescription_ENTmp = (SqlString)value;
				if(rateDescription_ENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RateDescription_EN", "RateDescription_EN can't be NULL");
				}
				_rateDescription_EN = value;
			}
		}


		public SqlString RateDescription_AR
		{
			get
			{
				return _rateDescription_AR;
			}
			set
			{
				_rateDescription_AR = value;
			}
		}


		public SqlDateTime FromDate
		{
			get
			{
				return _fromDate;
			}
			set
			{
				SqlDateTime fromDateTmp = (SqlDateTime)value;
				if(fromDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FromDate", "FromDate can't be NULL");
				}
				_fromDate = value;
			}
		}


		public SqlDateTime ToDate
		{
			get
			{
				return _toDate;
			}
			set
			{
				SqlDateTime toDateTmp = (SqlDateTime)value;
				if(toDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ToDate", "ToDate can't be NULL");
				}
				_toDate = value;
			}
		}


		public SqlMoney Rate
		{
			get
			{
				return _rate;
			}
			set
			{
				SqlMoney rateTmp = (SqlMoney)value;
				if(rateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Rate", "Rate can't be NULL");
				}
				_rate = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				_createdDate = value;
			}
		}


		public SqlInt32 CreatedUser
		{
			get
			{
				return _createdUser;
			}
			set
			{
				_createdUser = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				_lastModifiedUser = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				_lastModifiedDate = value;
			}
		}
		#endregion
	}
}
