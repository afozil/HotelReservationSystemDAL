///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Bookings'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, June 1, 2015, 7:39:39 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Bookings'.
	/// </summary>
	public class Bookings : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_bookingDate, _fromDate, _toDate, _lastModifiedDate;
			private SqlInt32		_rate_ID, _lastModifiedUser, _paymentStatus, _bookingStatus, _room_ID, _booking_ID, _roomType_ID, _guest_ID, _booking_Personnel,_paymentMode;
			private SqlMoney		_amount_Paid, _rate, _cost_After_Discount, _discount, _discountOffered, _amount_PendingPayment;
			private SqlString		_remarks;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Bookings()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID</LI>
		///		 <LI>BookingDate</LI>
		///		 <LI>FromDate. May be SqlDateTime.Null</LI>
		///		 <LI>ToDate. May be SqlDateTime.Null</LI>
		///		 <LI>Booking_Personnel. May be SqlInt32.Null</LI>
		///		 <LI>Rate_ID. May be SqlInt32.Null</LI>
		///		 <LI>Rate. May be SqlMoney.Null</LI>
		///		 <LI>Discount. May be SqlMoney.Null</LI>
		///		 <LI>Cost_After_Discount. May be SqlMoney.Null</LI>
		///		 <LI>Amount_Paid. May be SqlMoney.Null</LI>
		///		 <LI>BookingStatus. May be SqlInt32.Null</LI>
		///		 <LI>PaymentStatus. May be SqlInt32.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>Booking_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Bookings_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoomType_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomType_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@daBookingDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _toDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_Personnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_Personnel));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curRate", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _rate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _discount));
                cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount_Offered", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _discountOffered));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_After_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_After_Discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmount_Paid", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amount_Paid));
                cmdToExecute.Parameters.Add(new SqlParameter("@curAmount_PendingPayment", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amount_PendingPayment));
                cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentStatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentMode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _booking_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_booking_ID = (SqlInt32)cmdToExecute.Parameters["@iBooking_ID"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Bookings_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Bookings::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Booking_ID</LI>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID</LI>
		///		 <LI>BookingDate</LI>
		///		 <LI>FromDate. May be SqlDateTime.Null</LI>
		///		 <LI>ToDate. May be SqlDateTime.Null</LI>
		///		 <LI>Booking_Personnel. May be SqlInt32.Null</LI>
		///		 <LI>Rate_ID. May be SqlInt32.Null</LI>
		///		 <LI>Rate. May be SqlMoney.Null</LI>
		///		 <LI>Discount. May be SqlMoney.Null</LI>
		///		 <LI>Cost_After_Discount. May be SqlMoney.Null</LI>
		///		 <LI>Amount_Paid. May be SqlMoney.Null</LI>
		///		 <LI>BookingStatus. May be SqlInt32.Null</LI>
		///		 <LI>PaymentStatus. May be SqlInt32.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Bookings_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_ID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iRoomType_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _roomType_ID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iGuest_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _guest_ID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iRoom_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _room_ID));
				//cmdToExecute.Parameters.Add(new SqlParameter("@daBookingDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _bookingDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _fromDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _toDate));
				//cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_Personnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_Personnel));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curRate", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _rate));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _discount));
                cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount_Offered", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _discountOffered));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_After_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_After_Discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmount_Paid", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amount_Paid));
                cmdToExecute.Parameters.Add(new SqlParameter("@curAmount_PendingPayment", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _amount_PendingPayment));
				cmdToExecute.Parameters.Add(new SqlParameter("@iBookingStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _bookingStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentStatus", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentStatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentMode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorDesc));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Bookings_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Bookings::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Booking_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Bookings_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Bookings_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Bookings::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}

        

		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Booking_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Booking_ID</LI>
		///		 <LI>RoomType_ID</LI>
		///		 <LI>Guest_ID</LI>
		///		 <LI>Room_ID</LI>
		///		 <LI>BookingDate</LI>
		///		 <LI>FromDate</LI>
		///		 <LI>ToDate</LI>
		///		 <LI>Booking_Personnel</LI>
		///		 <LI>Rate_ID</LI>
		///		 <LI>Rate</LI>
		///		 <LI>Discount</LI>
		///		 <LI>Cost_After_Discount</LI>
		///		 <LI>Amount_Paid</LI>
		///		 <LI>BookingStatus</LI>
		///		 <LI>PaymentStatus</LI>
		///		 <LI>Remarks</LI>
		///		 <LI>LastModifiedDate</LI>
		///		 <LI>LastModifiedUser</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Bookings_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Bookings");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iBooking_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _booking_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Bookings_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_booking_ID = (Int32)toReturn.Rows[0]["Booking_ID"];
					_roomType_ID = (Int32)toReturn.Rows[0]["RoomType_ID"];
					_guest_ID = (Int32)toReturn.Rows[0]["Guest_ID"];
					_room_ID = (Int32)toReturn.Rows[0]["Room_ID"];
					_bookingDate = (DateTime)toReturn.Rows[0]["BookingDate"];
					_fromDate = toReturn.Rows[0]["FromDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["FromDate"];
					_toDate = toReturn.Rows[0]["ToDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["ToDate"];
					_booking_Personnel = toReturn.Rows[0]["Booking_Personnel"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Booking_Personnel"];
					_rate_ID = toReturn.Rows[0]["Rate_ID"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Rate_ID"];
					_rate = toReturn.Rows[0]["Rate"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Rate"];
					_discount = toReturn.Rows[0]["Discount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Discount"];
                    _discountOffered = toReturn.Rows[0]["Discount_Offered"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Discount_Offered"];
					_cost_After_Discount = toReturn.Rows[0]["Cost_After_Discount"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Cost_After_Discount"];
					_amount_Paid = toReturn.Rows[0]["Amount_Paid"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Amount_Paid"];
					_bookingStatus = toReturn.Rows[0]["BookingStatus"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["BookingStatus"];
					_paymentStatus = toReturn.Rows[0]["PaymentStatus"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PaymentStatus"];
                    _paymentMode = toReturn.Rows[0]["Payment_Mode"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["Payment_Mode"];
					_remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Bookings::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Bookings_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Bookings");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Bookings_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Bookings::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public  DataTable SearchCriteria()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Bookings_SearchCriteria]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Bookings");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Bookings_SearchCriteria' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Bookings::SearchCriteria::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SearchByCriteria(string commandName,SqlParameter sqlParam)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = commandName;
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Bookings");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(sqlParam);
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure '" + commandName + "' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Bookings::SearchByCriteria::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAvailableRooms(SqlDateTime fromDate, SqlDateTime toDate, SqlInt32 roomType)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Bookings_SelectAvailableRooms]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Bookings");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, fromDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, toDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRoomType", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, roomType));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorDesc));
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }
                
                // Execute query.
                
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

                if (_errorCode != (int)LLBLError.AllOk && _errorCode != -10 && _errorCode != -20)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Bookings_SelectAvailableRooms' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Bookings::SelectAvailableRooms::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public  DataTable SelectAvailableRoomTypes(SqlDateTime fromDate,SqlDateTime toDate)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Bookings_SelectAvailableRoomTypes]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Bookings");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, fromDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, toDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorDesc));
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Bookings_SelectAvailableRoomTypes' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Bookings::SelectAvailableRoomTypes::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAvailableOnlineRoomTypes(SqlDateTime fromDate, SqlDateTime toDate, SqlInt32 numRooms, SqlInt32 numAdults, SqlInt32 numKids)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Bookings_SelectAvailableOnlineRoomTypes]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Bookings");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@daFromDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, fromDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@daToDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, toDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRooms", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numRooms));
                cmdToExecute.Parameters.Add(new SqlParameter("@iAdults", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numAdults));
                cmdToExecute.Parameters.Add(new SqlParameter("@iKids", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, numKids));

                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));
                cmdToExecute.Parameters.Add(new SqlParameter("@sErrorDesc", SqlDbType.VarChar, 100, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorDesc));
                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;
                _errorDesc = (SqlString)cmdToExecute.Parameters["@sErrorDesc"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Bookings_SelectAvailableOnlineRoomTypes' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Bookings::SelectAvailableOnlineRoomTypes::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        #region Class Property Declarations
        public SqlInt32 Booking_ID
		{
			get
			{
				return _booking_ID;
			}
			set
			{
				SqlInt32 booking_IDTmp = (SqlInt32)value;
				if(booking_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Booking_ID", "Booking_ID can't be NULL");
				}
				_booking_ID = value;
			}
		}


		public SqlInt32 RoomType_ID
		{
			get
			{
				return _roomType_ID;
			}
			set
			{
				SqlInt32 roomType_IDTmp = (SqlInt32)value;
				if(roomType_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RoomType_ID", "RoomType_ID can't be NULL");
				}
				_roomType_ID = value;
			}
		}


		public SqlInt32 Guest_ID
		{
			get
			{
				return _guest_ID;
			}
			set
			{
				SqlInt32 guest_IDTmp = (SqlInt32)value;
				if(guest_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Guest_ID", "Guest_ID can't be NULL");
				}
				_guest_ID = value;
			}
		}


		public SqlInt32 Room_ID
		{
			get
			{
				return _room_ID;
			}
			set
			{
				SqlInt32 room_IDTmp = (SqlInt32)value;
				if(room_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Room_ID", "Room_ID can't be NULL");
				}
				_room_ID = value;
			}
		}


		public SqlDateTime BookingDate
		{
			get
			{
				return _bookingDate;
			}
			set
			{
				SqlDateTime bookingDateTmp = (SqlDateTime)value;
				if(bookingDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BookingDate", "BookingDate can't be NULL");
				}
				_bookingDate = value;
			}
		}


		public SqlDateTime FromDate
		{
			get
			{
				return _fromDate;
			}
			set
			{
				SqlDateTime fromDateTmp = (SqlDateTime)value;
				if(fromDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FromDate", "FromDate can't be NULL");
				}
				_fromDate = value;
			}
		}


		public SqlDateTime ToDate
		{
			get
			{
				return _toDate;
			}
			set
			{
				SqlDateTime toDateTmp = (SqlDateTime)value;
				if(toDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ToDate", "ToDate can't be NULL");
				}
				_toDate = value;
			}
		}


		public SqlInt32 Booking_Personnel
		{
			get
			{
				return _booking_Personnel;
			}
			set
			{
				SqlInt32 booking_PersonnelTmp = (SqlInt32)value;
				if(booking_PersonnelTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Booking_Personnel", "Booking_Personnel can't be NULL");
				}
				_booking_Personnel = value;
			}
		}


		public SqlInt32 Rate_ID
		{
			get
			{
				return _rate_ID;
			}
			set
			{
				SqlInt32 rate_IDTmp = (SqlInt32)value;
				if(rate_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Rate_ID", "Rate_ID can't be NULL");
				}
				_rate_ID = value;
			}
		}


		public SqlMoney Rate
		{
			get
			{
				return _rate;
			}
			set
			{
				SqlMoney rateTmp = (SqlMoney)value;
				if(rateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Rate", "Rate can't be NULL");
				}
				_rate = value;
			}
		}


		public SqlMoney Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				SqlMoney discountTmp = (SqlMoney)value;
				if(discountTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Discount", "Discount can't be NULL");
				}
				_discount = value;
			}
		}

        public SqlMoney DiscountOffered
        {
            get
            {
                return _discountOffered;
            }
            set
            {
                SqlMoney discountOfferedTmp = (SqlMoney)value;
                if (discountOfferedTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Discount", "Discount can't be NULL");
                }
                _discountOffered = value;
            }
        }


		public SqlMoney Cost_After_Discount
		{
			get
			{
				return _cost_After_Discount;
			}
			set
			{
				SqlMoney cost_After_DiscountTmp = (SqlMoney)value;
				if(cost_After_DiscountTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Cost_After_Discount", "Cost_After_Discount can't be NULL");
				}
				_cost_After_Discount = value;
			}
		}


		public SqlMoney Amount_Paid
		{
			get
			{
				return _amount_Paid;
			}
			set
			{
				SqlMoney amount_PaidTmp = (SqlMoney)value;
				if(amount_PaidTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Amount_Paid", "Amount_Paid can't be NULL");
				}
				_amount_Paid = value;
			}
		}

        public SqlMoney Amount_PendingPayment
        {
            get
            {
                return _amount_PendingPayment;
            }
            set
            {
                SqlMoney amount_PendingPaymentTmp = (SqlMoney)value;
                if (amount_PendingPaymentTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Amount_Paid", "Amount_Paid can't be NULL");
                }
                _amount_PendingPayment = value;
            }
        }


		public SqlInt32 BookingStatus
		{
			get
			{
				return _bookingStatus;
			}
			set
			{
				SqlInt32 bookingStatusTmp = (SqlInt32)value;
				if(bookingStatusTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("BookingStatus", "BookingStatus can't be NULL");
				}
				_bookingStatus = value;
			}
		}


		public SqlInt32 PaymentStatus
		{
			get
			{
				return _paymentStatus;
			}
			set
			{
				SqlInt32 paymentStatusTmp = (SqlInt32)value;
				if(paymentStatusTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PaymentStatus", "PaymentStatus can't be NULL");
				}
				_paymentStatus = value;
			}
		}


		public SqlString Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				SqlString remarksTmp = (SqlString)value;
				if(remarksTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Remarks", "Remarks can't be NULL");
				}
				_remarks = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				SqlDateTime lastModifiedDateTmp = (SqlDateTime)value;
				if(lastModifiedDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedDate", "LastModifiedDate can't be NULL");
				}
				_lastModifiedDate = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				SqlInt32 lastModifiedUserTmp = (SqlInt32)value;
				if(lastModifiedUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedUser", "LastModifiedUser can't be NULL");
				}
				_lastModifiedUser = value;
			}
		}

        public SqlInt32 PaymentMode
        {
            get
            {
                return _paymentMode;
            }
            set
            {
                SqlInt32 paymentModeTmp = (SqlInt32)value;
                if (paymentModeTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Rate_ID", "Rate_ID can't be NULL");
                }
                _paymentMode = value;
            }
        }

		#endregion
	}
}
