///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'EOD_Reports'
// Generated by LLBLGen v1.21.2003.712 Final on: Sunday, July 12, 2015, 1:00:39 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'EOD_Reports'.
	/// </summary>
	public class EOD_Reports : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_reportTye_PrimaryKey, _eOD_ID, _eOD_ReportID;
			private SqlString		_reportName, _reportType;
			private SqlBinary		_report;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public EOD_Reports()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>EOD_ReportID. May be SqlInt32.Null</LI>
		///		 <LI>EOD_ID. May be SqlInt32.Null</LI>
		///		 <LI>ReportName. May be SqlString.Null</LI>
		///		 <LI>ReportType. May be SqlString.Null</LI>
		///		 <LI>Report. May be SqlBinary.Null</LI>
		///		 <LI>ReportTye_PrimaryKey</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_EOD_Reports_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iEOD_ReportID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _eOD_ReportID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iEOD_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _eOD_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sReportName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _reportName));
				cmdToExecute.Parameters.Add(new SqlParameter("@sReportType", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _reportType));
				cmdToExecute.Parameters.Add(new SqlParameter("@biReport", SqlDbType.VarBinary, -1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _report));
				cmdToExecute.Parameters.Add(new SqlParameter("@iReportTye_PrimaryKey", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reportTye_PrimaryKey));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_EOD_Reports_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("EOD_Reports::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_EOD_Reports_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("EOD_Reports");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_EOD_Reports_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("EOD_Reports::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 EOD_ReportID
		{
			get
			{
				return _eOD_ReportID;
			}
			set
			{
				SqlInt32 eOD_ReportIDTmp = (SqlInt32)value;
				if(eOD_ReportIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EOD_ReportID", "EOD_ReportID can't be NULL");
				}
				_eOD_ReportID = value;
			}
		}


		public SqlInt32 EOD_ID
		{
			get
			{
				return _eOD_ID;
			}
			set
			{
				SqlInt32 eOD_IDTmp = (SqlInt32)value;
				if(eOD_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EOD_ID", "EOD_ID can't be NULL");
				}
				_eOD_ID = value;
			}
		}


		public SqlString ReportName
		{
			get
			{
				return _reportName;
			}
			set
			{
				SqlString reportNameTmp = (SqlString)value;
				if(reportNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ReportName", "ReportName can't be NULL");
				}
				_reportName = value;
			}
		}


		public SqlString ReportType
		{
			get
			{
				return _reportType;
			}
			set
			{
				SqlString reportTypeTmp = (SqlString)value;
				if(reportTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ReportType", "ReportType can't be NULL");
				}
				_reportType = value;
			}
		}


		public SqlBinary Report
		{
			get
			{
				return _report;
			}
			set
			{
				SqlBinary reportTmp = (SqlBinary)value;
				if(reportTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Report", "Report can't be NULL");
				}
				_report = value;
			}
		}


		public SqlInt32 ReportTye_PrimaryKey
		{
			get
			{
				return _reportTye_PrimaryKey;
			}
			set
			{
				SqlInt32 reportTye_PrimaryKeyTmp = (SqlInt32)value;
				if(reportTye_PrimaryKeyTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ReportTye_PrimaryKey", "ReportTye_PrimaryKey can't be NULL");
				}
				_reportTye_PrimaryKey = value;
			}
		}
		#endregion
	}
}
