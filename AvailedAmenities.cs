///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'AvailedAmenities'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, June 15, 2015, 8:28:28 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'AvailedAmenities'.
	/// </summary>
	public class AvailedAmenities : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_lastModifiedDate;
			private SqlDecimal		_quantity;
			private SqlInt32		_lastModifiedUser, _availedAmenity_ID, _checkIn_ID, _amenitiesID;
			private SqlMoney		_cost, _totalCost;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AvailedAmenities()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AmenitiesID</LI>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>Quantity</LI>
		///		 <LI>Cost. May be SqlMoney.Null</LI>
		///		 <LI>TotalCost. May be SqlMoney.Null</LI>
		///		 <LI>LastModifiedDate. May be SqlDateTime.Null</LI>
		///		 <LI>LastModifiedUser. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>AvailedAmenity_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public  bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedAmenities_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iAmenitiesID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _amenitiesID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _quantity));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost));
				cmdToExecute.Parameters.Add(new SqlParameter("@curTotalCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _totalCost));
				cmdToExecute.Parameters.Add(new SqlParameter("@daLastModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _lastModifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iLastModifiedUser", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _lastModifiedUser));
				cmdToExecute.Parameters.Add(new SqlParameter("@iAvailedAmenity_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _availedAmenity_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_availedAmenity_ID = (SqlInt32)cmdToExecute.Parameters["@iAvailedAmenity_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedAmenities_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedAmenities::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a unique field. This method will Select one row from the database, based on the unique field 'AvailedAmenity_ID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>AvailedAmenity_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>AvailedAmenity_ID</LI>
		///		 <LI>AmenitiesID</LI>
		///		 <LI>CheckIn_ID</LI>
		///		 <LI>Quantity</LI>
		///		 <LI>Cost</LI>
		///		 <LI>TotalCost</LI>
		///		 <LI>LastModifiedDate</LI>
		///		 <LI>LastModifiedUser</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public DataTable SelectOneWAvailedAmenity_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedAmenities_SelectOneWAvailedAmenity_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("AvailedAmenities");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iAvailedAmenity_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _availedAmenity_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedAmenities_SelectOneWAvailedAmenity_IDLogic' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_availedAmenity_ID = (Int32)toReturn.Rows[0]["AvailedAmenity_ID"];
					_amenitiesID = (Int32)toReturn.Rows[0]["AmenitiesID"];
					_checkIn_ID = (Int32)toReturn.Rows[0]["CheckIn_ID"];
					_quantity = (Decimal)toReturn.Rows[0]["Quantity"];
					_cost = toReturn.Rows[0]["Cost"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Cost"];
					_totalCost = toReturn.Rows[0]["TotalCost"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["TotalCost"];
					_lastModifiedDate = toReturn.Rows[0]["LastModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["LastModifiedDate"];
					_lastModifiedUser = toReturn.Rows[0]["LastModifiedUser"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LastModifiedUser"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedAmenities::SelectOneWAvailedAmenity_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public DataTable SelectByCheckInID()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_AvailedAmenities_SelectByCheckInID]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("AvailedAmenities");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@CheckIn_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkIn_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'SelectByCheckInID' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("AvailedAmenities::SelectByCheckInID::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public  DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedAmenities_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("AvailedAmenities");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedAmenities_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedAmenities::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 AvailedAmenity_ID
		{
			get
			{
				return _availedAmenity_ID;
			}
			set
			{
				SqlInt32 availedAmenity_IDTmp = (SqlInt32)value;
				if(availedAmenity_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("AvailedAmenity_ID", "AvailedAmenity_ID can't be NULL");
				}
				_availedAmenity_ID = value;
			}
		}


		public SqlInt32 AmenitiesID
		{
			get
			{
				return _amenitiesID;
			}
			set
			{
				SqlInt32 amenitiesIDTmp = (SqlInt32)value;
				if(amenitiesIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("AmenitiesID", "AmenitiesID can't be NULL");
				}
				_amenitiesID = value;
			}
		}


		public SqlInt32 CheckIn_ID
		{
			get
			{
				return _checkIn_ID;
			}
			set
			{
				SqlInt32 checkIn_IDTmp = (SqlInt32)value;
				if(checkIn_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckIn_ID", "CheckIn_ID can't be NULL");
				}
				_checkIn_ID = value;
			}
		}


		public SqlDecimal Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				SqlDecimal quantityTmp = (SqlDecimal)value;
				if(quantityTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Quantity", "Quantity can't be NULL");
				}
				_quantity = value;
			}
		}


		public SqlMoney Cost
		{
			get
			{
				return _cost;
			}
			set
			{
				SqlMoney costTmp = (SqlMoney)value;
				if(costTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Cost", "Cost can't be NULL");
				}
				_cost = value;
			}
		}


		public SqlMoney TotalCost
		{
			get
			{
				return _totalCost;
			}
			set
			{
				SqlMoney totalCostTmp = (SqlMoney)value;
				if(totalCostTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TotalCost", "TotalCost can't be NULL");
				}
				_totalCost = value;
			}
		}


		public SqlDateTime LastModifiedDate
		{
			get
			{
				return _lastModifiedDate;
			}
			set
			{
				SqlDateTime lastModifiedDateTmp = (SqlDateTime)value;
				if(lastModifiedDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedDate", "LastModifiedDate can't be NULL");
				}
				_lastModifiedDate = value;
			}
		}


		public SqlInt32 LastModifiedUser
		{
			get
			{
				return _lastModifiedUser;
			}
			set
			{
				SqlInt32 lastModifiedUserTmp = (SqlInt32)value;
				if(lastModifiedUserTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("LastModifiedUser", "LastModifiedUser can't be NULL");
				}
				_lastModifiedUser = value;
			}
		}
		#endregion
	}
}
