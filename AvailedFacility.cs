///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'AvailedFacility'
// Generated by LLBLGen v1.21.2003.712 Final on: Wednesday, June 10, 2015, 8:52:59 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'AvailedFacility'.
	/// </summary>
	public class AvailedFacility : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_quantity;
			private SqlInt32		_facilityAvailed_ID, _checkOut_ID;
			private SqlMoney		_cost, _totalCost;
			private SqlString		_facility, _facilityType;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AvailedFacility()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CheckOut_ID</LI>
		///		 <LI>FacilityType</LI>
		///		 <LI>Facility. May be SqlString.Null</LI>
		///		 <LI>Quantity</LI>
		///		 <LI>Cost. May be SqlMoney.Null</LI>
		///		 <LI>TotalCost. May be SqlMoney.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>FacilityAvailed_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedFacility_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iCheckOut_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _checkOut_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacilityType", SqlDbType.VarChar, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facilityType));
				cmdToExecute.Parameters.Add(new SqlParameter("@sFacility", SqlDbType.VarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _facility));
				cmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _quantity));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost));
				cmdToExecute.Parameters.Add(new SqlParameter("@curTotalCost", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _totalCost));
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacilityAvailed_ID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _facilityAvailed_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _facilityAvailed_ID = (SqlInt32)cmdToExecute.Parameters["@iFacilityAvailed_ID"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedFacility_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedFacility::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a unique field. This method will Select one row from the database, based on the unique field 'FacilityAvailed_ID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>FacilityAvailed_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>FacilityAvailed_ID</LI>
		///		 <LI>CheckOut_ID</LI>
		///		 <LI>FacilityType</LI>
		///		 <LI>Facility</LI>
		///		 <LI>Quantity</LI>
		///		 <LI>Cost</LI>
		///		 <LI>TotalCost</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public DataTable SelectOneWFacilityAvailed_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedFacility_SelectOneWFacilityAvailed_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("AvailedFacility");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iFacilityAvailed_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _facilityAvailed_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedFacility_SelectOneWFacilityAvailed_IDLogic' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_facilityAvailed_ID = (Int32)toReturn.Rows[0]["FacilityAvailed_ID"];
					_checkOut_ID = (Int32)toReturn.Rows[0]["CheckOut_ID"];
					_facilityType = (string)toReturn.Rows[0]["FacilityType"];
					_facility = toReturn.Rows[0]["Facility"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Facility"];
					_quantity = (Decimal)toReturn.Rows[0]["Quantity"];
					_cost = toReturn.Rows[0]["Cost"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Cost"];
					_totalCost = toReturn.Rows[0]["TotalCost"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["TotalCost"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedFacility::SelectOneWFacilityAvailed_IDLogic::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_AvailedFacility_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("AvailedFacility");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_AvailedFacility_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("AvailedFacility::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 FacilityAvailed_ID
		{
			get
			{
				return _facilityAvailed_ID;
			}
			set
			{
				SqlInt32 facilityAvailed_IDTmp = (SqlInt32)value;
				if(facilityAvailed_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FacilityAvailed_ID", "FacilityAvailed_ID can't be NULL");
				}
				_facilityAvailed_ID = value;
			}
		}


		public SqlInt32 CheckOut_ID
		{
			get
			{
				return _checkOut_ID;
			}
			set
			{
				SqlInt32 checkOut_IDTmp = (SqlInt32)value;
				if(checkOut_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CheckOut_ID", "CheckOut_ID can't be NULL");
				}
				_checkOut_ID = value;
			}
		}


		public SqlString FacilityType
		{
			get
			{
				return _facilityType;
			}
			set
			{
				SqlString facilityTypeTmp = (SqlString)value;
				if(facilityTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("FacilityType", "FacilityType can't be NULL");
				}
				_facilityType = value;
			}
		}


		public SqlString Facility
		{
			get
			{
				return _facility;
			}
			set
			{
				SqlString facilityTmp = (SqlString)value;
				if(facilityTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Facility", "Facility can't be NULL");
				}
				_facility = value;
			}
		}


		public SqlDecimal Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				SqlDecimal quantityTmp = (SqlDecimal)value;
				if(quantityTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Quantity", "Quantity can't be NULL");
				}
				_quantity = value;
			}
		}


		public SqlMoney Cost
		{
			get
			{
				return _cost;
			}
			set
			{
				SqlMoney costTmp = (SqlMoney)value;
				if(costTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Cost", "Cost can't be NULL");
				}
				_cost = value;
			}
		}


		public SqlMoney TotalCost
		{
			get
			{
				return _totalCost;
			}
			set
			{
				SqlMoney totalCostTmp = (SqlMoney)value;
				if(totalCostTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TotalCost", "TotalCost can't be NULL");
				}
				_totalCost = value;
			}
		}
		#endregion
	}
}
