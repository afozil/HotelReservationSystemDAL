///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Reservation_Payments'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, October 10, 2015, 10:20:25 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Reservation_Payments'.
	/// </summary>
	public class Reservation_Payments : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_createdDate;
            private SqlInt32 _paymentStatus, _rate_ID, _discount_ID, _unitsConsumed, _reservation_ID, _payment_ID, _paymentPersonnel, _availedService_Type, _paymentMode, _ServiceNo;
			private SqlMoney		_cost_After_Discount, _amountReceived, _totalCost_Before_Discount, _discount_Offered;
			private SqlString		_remarks, _invoice;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Reservation_Payments()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>AvailedService_Type</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>PaymentPersonnel</LI>
		///		 <LI>PaymentStatus. May be SqlInt32.Null</LI>
		///		 <LI>Rate_ID</LI>
		///		 <LI>UnitsConsumed</LI>
		///		 <LI>TotalCost_Before_Discount</LI>
		///		 <LI>Discount_ID. May be SqlInt32.Null</LI>
		///		 <LI>Discount_Offered. May be SqlMoney.Null</LI>
		///		 <LI>Cost_After_Discount</LI>
		///		 <LI>AmountReceived. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>Payment_ID</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
        public override bool Insert()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_Insert]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iAvailedService_Type", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _availedService_Type));
                cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentPersonnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentPersonnel));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _paymentStatus));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentMode", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _paymentMode));
                cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iUnitsConsumed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _unitsConsumed));
                cmdToExecute.Parameters.Add(new SqlParameter("@curTotalCost_Before_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _totalCost_Before_Discount));
                cmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_ID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _discount_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount_Offered", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discount_Offered));
                cmdToExecute.Parameters.Add(new SqlParameter("@curCost_After_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_After_Discount));
                cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _amountReceived));
                cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _remarks));
                cmdToExecute.Parameters.Add(new SqlParameter("@iPayment_ID", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _payment_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _payment_ID = (SqlInt32)cmdToExecute.Parameters["@iPayment_ID"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Reservation_Payments_Insert' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Reservation_Payments::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>AvailedService_Type</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>PaymentPersonnel</LI>
		///		 <LI>PaymentStatus. May be SqlInt32.Null</LI>
		///		 <LI>Rate_ID</LI>
		///		 <LI>UnitsConsumed</LI>
		///		 <LI>TotalCost_Before_Discount</LI>
		///		 <LI>Discount_ID. May be SqlInt32.Null</LI>
		///		 <LI>Discount_Offered. May be SqlMoney.Null</LI>
		///		 <LI>Cost_After_Discount</LI>
		///		 <LI>AmountReceived. May be SqlMoney.Null</LI>
		///		 <LI>Remarks. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iPayment_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _payment_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iAvailedService_Type", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _availedService_Type));
				cmdToExecute.Parameters.Add(new SqlParameter("@daCreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentPersonnel", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _paymentPersonnel));
				cmdToExecute.Parameters.Add(new SqlParameter("@iPaymentStatus", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _paymentStatus));
				cmdToExecute.Parameters.Add(new SqlParameter("@iRate_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _rate_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iUnitsConsumed", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _unitsConsumed));
				cmdToExecute.Parameters.Add(new SqlParameter("@curTotalCost_Before_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _totalCost_Before_Discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@iDiscount_ID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _discount_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@curDiscount_Offered", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _discount_Offered));
				cmdToExecute.Parameters.Add(new SqlParameter("@curCost_After_Discount", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _cost_After_Discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@curAmountReceived", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _amountReceived));
				cmdToExecute.Parameters.Add(new SqlParameter("@sRemarks", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _remarks));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Reservation_Payments_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Reservation_Payments::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iPayment_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _payment_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Reservation_Payments_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Reservation_Payments::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>Payment_ID</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>Payment_ID</LI>
		///		 <LI>Reservation_ID</LI>
		///		 <LI>AvailedService_Type</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>PaymentPersonnel</LI>
		///		 <LI>PaymentStatus</LI>
		///		 <LI>Rate_ID</LI>
		///		 <LI>UnitsConsumed</LI>
		///		 <LI>TotalCost_Before_Discount</LI>
		///		 <LI>Discount_ID</LI>
		///		 <LI>Discount_Offered</LI>
		///		 <LI>Cost_After_Discount</LI>
		///		 <LI>AmountReceived</LI>
		///		 <LI>Remarks</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Reservation_Payments");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iPayment_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _payment_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Reservation_Payments_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_payment_ID = (SqlInt32)toReturn.Rows[0]["Payment_ID"];
                    _reservation_ID = (SqlInt32)toReturn.Rows[0]["Reservation_ID"];
                    _availedService_Type = (SqlInt32)toReturn.Rows[0]["AvailedService_Type"];
					_createdDate = (SqlDateTime)toReturn.Rows[0]["CreatedDate"];
                    _paymentPersonnel = (SqlInt32)toReturn.Rows[0]["PaymentPersonnel"];
                    _paymentStatus = toReturn.Rows[0]["PaymentStatus"] == System.DBNull.Value ? SqlInt32.Null : (SqlInt32)toReturn.Rows[0]["PaymentStatus"];
                    _paymentMode = toReturn.Rows[0]["PaymentMode"] == System.DBNull.Value ? SqlInt32.Null : (SqlInt32)toReturn.Rows[0]["PaymentMode"];
                    _rate_ID = (SqlInt32)toReturn.Rows[0]["Rate_ID"];
                    _invoice = toReturn.Rows[0]["Invoice"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Invoice"];
                    _unitsConsumed = (SqlInt32)toReturn.Rows[0]["UnitsConsumed"];
					_totalCost_Before_Discount = (SqlMoney)toReturn.Rows[0]["TotalCost_Before_Discount"];
                    _discount_ID = toReturn.Rows[0]["Discount_ID"] == System.DBNull.Value ? SqlInt32.Null : (SqlInt32)toReturn.Rows[0]["Discount_ID"];
					_discount_Offered = toReturn.Rows[0]["Discount_Offered"] == System.DBNull.Value ? SqlMoney.Null : (SqlMoney)toReturn.Rows[0]["Discount_Offered"];
					_cost_After_Discount = (SqlMoney)toReturn.Rows[0]["Cost_After_Discount"];
					_amountReceived = toReturn.Rows[0]["AmountReceived"] == System.DBNull.Value ? SqlMoney.Null : (SqlMoney)toReturn.Rows[0]["AmountReceived"];
					_remarks = toReturn.Rows[0]["Remarks"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Remarks"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Reservation_Payments::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_SelectByReservation]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Reservation_Payments");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Reservation_Payments_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Reservation_Payments::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public DataTable GetReservationPayment()//added by benoy for Registration confirmation report
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[pr_Reservation_Payments_SelectByRID]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("Reservation_Payments");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_Reservation_Payments_SelectByRID' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Reservation_Payments::GetReservationPayment::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


        public  bool InsertServiceInvoice()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.ServiceInvoiceInsert";
            cmdToExecute.CommandType = CommandType.StoredProcedure;

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@iReservation_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _reservation_ID));
                cmdToExecute.Parameters.Add(new SqlParameter("@Payment_ID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _payment_ID));

                cmdToExecute.Parameters.Add(new SqlParameter("@ServiceNo", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _ServiceNo));
                cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                if (_mainConnectionIsCreatedLocal)
                {
                    // Open connection.
                    _mainConnection.Open();
                }
                else
                {
                    if (_mainConnectionProvider.IsTransactionPending)
                    {
                        cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
                    }
                }

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                _ServiceNo = (SqlInt32)cmdToExecute.Parameters["@ServiceNo"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'pr_ServiceInvoice_Insert' reported the ErrorCode: " + _errorCode);
                }

                return true;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("Reservation_Payments::Insert::Error occured.", ex);
            }
            finally
            {
                if (_mainConnectionIsCreatedLocal)
                {
                    // Close connection.
                    _mainConnection.Close();
                }
                cmdToExecute.Dispose();
            }
        }









		#region Class Property Declarations
		public SqlInt32 Payment_ID
		{
			get
			{
				return _payment_ID;
			}
			set
			{
				SqlInt32 payment_IDTmp = (SqlInt32)value;
				if(payment_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Payment_ID", "Payment_ID can't be NULL");
				}
				_payment_ID = value;
			}
		}

       public SqlInt32 ServiceNo
		{
			get
			{
				return _ServiceNo;
			}
			set
			{
                SqlInt32 ServiceNoTmp = (SqlInt32)value;
                if (ServiceNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ServiceNo", "ServiceNo can't be NULL");
				}
				_ServiceNo = value;
			}
		}

        

        public SqlInt32 PaymentMode
        {
            get
            {
                return _paymentMode;
            }
            set
            {
                _paymentMode = value;
            }
        }

		public SqlInt32 Reservation_ID
		{
			get
			{
				return _reservation_ID;
			}
			set
			{
				SqlInt32 reservation_IDTmp = (SqlInt32)value;
				if(reservation_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Reservation_ID", "Reservation_ID can't be NULL");
				}
				_reservation_ID = value;
			}
		}


		public SqlInt32 AvailedService_Type
		{
			get
			{
				return _availedService_Type;
			}
			set
			{
				SqlInt32 availedService_TypeTmp = (SqlInt32)value;
				if(availedService_TypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("AvailedService_Type", "AvailedService_Type can't be NULL");
				}
				_availedService_Type = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				SqlDateTime createdDateTmp = (SqlDateTime)value;
				if(createdDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedDate", "CreatedDate can't be NULL");
				}
				_createdDate = value;
			}
		}


		public SqlInt32 PaymentPersonnel
		{
			get
			{
				return _paymentPersonnel;
			}
			set
			{
				SqlInt32 paymentPersonnelTmp = (SqlInt32)value;
				if(paymentPersonnelTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PaymentPersonnel", "PaymentPersonnel can't be NULL");
				}
				_paymentPersonnel = value;
			}
		}


		public SqlInt32 PaymentStatus
		{
			get
			{
				return _paymentStatus;
			}
			set
			{
				_paymentStatus = value;
			}
		}


		public SqlInt32 Rate_ID
		{
			get
			{
				return _rate_ID;
			}
			set
			{
				SqlInt32 rate_IDTmp = (SqlInt32)value;
				if(rate_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Rate_ID", "Rate_ID can't be NULL");
				}
				_rate_ID = value;
			}
		}


		public SqlInt32 UnitsConsumed
		{
			get
			{
				return _unitsConsumed;
			}
			set
			{
				SqlInt32 unitsConsumedTmp = (SqlInt32)value;
				if(unitsConsumedTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("UnitsConsumed", "UnitsConsumed can't be NULL");
				}
				_unitsConsumed = value;
			}
		}


		public SqlMoney TotalCost_Before_Discount
		{
			get
			{
				return _totalCost_Before_Discount;
			}
			set
			{
				SqlMoney totalCost_Before_DiscountTmp = (SqlMoney)value;
				if(totalCost_Before_DiscountTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TotalCost_Before_Discount", "TotalCost_Before_Discount can't be NULL");
				}
				_totalCost_Before_Discount = value;
			}
		}


		public SqlInt32 Discount_ID
		{
			get
			{
				return _discount_ID;
			}
			set
			{
				_discount_ID = value;
			}
		}


		public SqlMoney Discount_Offered
		{
			get
			{
				return _discount_Offered;
			}
			set
			{
				_discount_Offered = value;
			}
		}


		public SqlMoney Cost_After_Discount
		{
			get
			{
				return _cost_After_Discount;
			}
			set
			{
				SqlMoney cost_After_DiscountTmp = (SqlMoney)value;
				if(cost_After_DiscountTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Cost_After_Discount", "Cost_After_Discount can't be NULL");
				}
				_cost_After_Discount = value;
			}
		}


		public SqlMoney AmountReceived
		{
			get
			{
				return _amountReceived;
			}
			set
			{
				_amountReceived = value;
			}
		}


		public SqlString Remarks
		{
			get
			{
				return _remarks;
			}
			set
			{
				_remarks = value;
			}
		}

        public SqlString Invoice
        {
            get
            {
                return _invoice;
            }
            set
            {
                _invoice= value;
            }
        }
		#endregion
	}
}
