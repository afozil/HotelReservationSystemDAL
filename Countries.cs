///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Countries'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, May 23, 2015, 10:17:03 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace HotelReservationSystemDAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Countries'.
	/// </summary>
	public class Countries : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		_iSO_NumericCode, _iSO_CurrencyCode, _countryName_EN, _iSO_ALPHA3_Code, _iSO_ALPHA2_Code;
			private SqlBinary		_nationalFlag;
			private SqlString		_counryName_AR;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Countries()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CountryName_EN</LI>
		///		 <LI>CounryName_AR. May be SqlString.Null</LI>
		///		 <LI>ISO_ALPHA2_Code. May be SqlString.Null</LI>
		///		 <LI>ISO_ALPHA3_Code</LI>
		///		 <LI>ISO_NumericCode. May be SqlString.Null</LI>
		///		 <LI>ISO_CurrencyCode. May be SqlString.Null</LI>
		///		 <LI>NationalFlag. May be SqlBinary.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Countries_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sCountryName_EN", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _countryName_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sCounryName_AR", SqlDbType.NVarChar, 150, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _counryName_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA2_Code", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA2_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA3_Code", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA3_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_NumericCode", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_NumericCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_CurrencyCode", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_CurrencyCode));
				int	length = 0;
				if(!_nationalFlag.IsNull)
				{
					length = _nationalFlag.Length;
				}
				cmdToExecute.Parameters.Add(new SqlParameter("@blobNationalFlag", SqlDbType.Image, length, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nationalFlag));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Countries_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Countries::Insert::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CountryName_EN</LI>
		///		 <LI>CounryName_AR. May be SqlString.Null</LI>
		///		 <LI>ISO_ALPHA2_Code. May be SqlString.Null</LI>
		///		 <LI>ISO_ALPHA3_Code</LI>
		///		 <LI>ISO_NumericCode. May be SqlString.Null</LI>
		///		 <LI>ISO_CurrencyCode. May be SqlString.Null</LI>
		///		 <LI>NationalFlag. May be SqlBinary.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Countries_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sCountryName_EN", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _countryName_EN));
				cmdToExecute.Parameters.Add(new SqlParameter("@sCounryName_AR", SqlDbType.NVarChar, 150, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _counryName_AR));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA2_Code", SqlDbType.Char, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA2_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA3_Code", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA3_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_NumericCode", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_NumericCode));
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_CurrencyCode", SqlDbType.Char, 3, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _iSO_CurrencyCode));
				int	length = 0;
				if(!_nationalFlag.IsNull)
				{
					length = _nationalFlag.Length;
				}
				cmdToExecute.Parameters.Add(new SqlParameter("@blobNationalFlag", SqlDbType.Image, length, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nationalFlag));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Countries_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Countries::Update::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ISO_ALPHA3_Code</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Countries_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA3_Code", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA3_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Countries_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Countries::Delete::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ISO_ALPHA3_Code</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>CountryName_EN</LI>
		///		 <LI>CounryName_AR</LI>
		///		 <LI>ISO_ALPHA2_Code</LI>
		///		 <LI>ISO_ALPHA3_Code</LI>
		///		 <LI>ISO_NumericCode</LI>
		///		 <LI>ISO_CurrencyCode</LI>
		///		 <LI>NationalFlag</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Countries_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Countries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@sISO_ALPHA3_Code", SqlDbType.Char, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _iSO_ALPHA3_Code));
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (Int32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Countries_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_countryName_EN = (string)toReturn.Rows[0]["CountryName_EN"];
					_counryName_AR = toReturn.Rows[0]["CounryName_AR"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["CounryName_AR"];
					_iSO_ALPHA2_Code = toReturn.Rows[0]["ISO_ALPHA2_Code"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["ISO_ALPHA2_Code"];
					_iSO_ALPHA3_Code = (string)toReturn.Rows[0]["ISO_ALPHA3_Code"];
					_iSO_NumericCode = toReturn.Rows[0]["ISO_NumericCode"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["ISO_NumericCode"];
					_iSO_CurrencyCode = toReturn.Rows[0]["ISO_CurrencyCode"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["ISO_CurrencyCode"];
					_nationalFlag = toReturn.Rows[0]["NationalFlag"] == System.DBNull.Value ? SqlBinary.Null : (byte[])toReturn.Rows[0]["NationalFlag"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Countries::SelectOne::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_Countries_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Countries");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				if(_mainConnectionIsCreatedLocal)
				{
					// Open connection.
					_mainConnection.Open();
				}
				else
				{
					if(_mainConnectionProvider.IsTransactionPending)
					{
						cmdToExecute.Transaction = _mainConnectionProvider.CurrentTransaction;
					}
				}

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@iErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_Countries_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Countries::SelectAll::Error occured.", ex);
			}
			finally
			{
				if(_mainConnectionIsCreatedLocal)
				{
					// Close connection.
					_mainConnection.Close();
				}
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlString CountryName_EN
		{
			get
			{
				return _countryName_EN;
			}
			set
			{
				SqlString countryName_ENTmp = (SqlString)value;
				if(countryName_ENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CountryName_EN", "CountryName_EN can't be NULL");
				}
				_countryName_EN = value;
			}
		}


		public SqlString CounryName_AR
		{
			get
			{
				return _counryName_AR;
			}
			set
			{
				_counryName_AR = value;
			}
		}


		public SqlString ISO_ALPHA2_Code
		{
			get
			{
				return _iSO_ALPHA2_Code;
			}
			set
			{
				_iSO_ALPHA2_Code = value;
			}
		}


		public SqlString ISO_ALPHA3_Code
		{
			get
			{
				return _iSO_ALPHA3_Code;
			}
			set
			{
				SqlString iSO_ALPHA3_CodeTmp = (SqlString)value;
				if(iSO_ALPHA3_CodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ISO_ALPHA3_Code", "ISO_ALPHA3_Code can't be NULL");
				}
				_iSO_ALPHA3_Code = value;
			}
		}


		public SqlString ISO_NumericCode
		{
			get
			{
				return _iSO_NumericCode;
			}
			set
			{
				_iSO_NumericCode = value;
			}
		}


		public SqlString ISO_CurrencyCode
		{
			get
			{
				return _iSO_CurrencyCode;
			}
			set
			{
				_iSO_CurrencyCode = value;
			}
		}


		public SqlBinary NationalFlag
		{
			get
			{
				return _nationalFlag;
			}
			set
			{
				_nationalFlag = value;
			}
		}
		#endregion
	}
}
